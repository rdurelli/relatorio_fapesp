@inproceedings{5306272,
abstract = {A build system breathes life into source code, as it configures and directs the construction of a software system from textual source code modules. Surprisingly, build languages and tools have not received considerable attention by academics and practitioners, making current build systems a mysterious and frustrating resource to work with. Our dissertation presents a conceptual framework with tool support to recover, analyze and refactor a build system. We demonstrate the applicability of our framework by analyzing the evolution of the Linux kernel build system and the introduction of AOSD technology in five legacy build systems. In all cases, we found that the build system is a complex software system of its own, trying to co-evolve in a synchronized way with the source code while working around shortcomings of the underlying build technology. Based on our findings, we hypothesize four conceptual reasons of co-evolution to guide future research in the area of build systems.},
annote = {                                                                        ARTIGO EXCLUIDO                                                                                      
Este artigo n\~{a}o retrata sobre aspect mining. E tamb\'{e}m foi excluido pq o mesmo tem somente 4 p\'{a}ginas. Sendo o mesmo um short paper.        
        
Os seguintes crit\'{e}erios de exclus\~{a}o foram aplicados neste estudo:
EC1: The primary study is not about concern mining techniques; 
EC5: The primary study is a short paper (papers with less than four pages);},
author = {Adams, B},
booktitle = {Software Maintenance, 2009. ICSM 2009. IEEE International Conference on},
doi = {10.1109/ICSM.2009.5306272},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Adams/Software Maintenance, 2009. ICSM 2009. IEEE International Conference on/Adams - 2009 - Co-evolution of source code and the build system.pdf:pdf},
issn = {1063-6773},
keywords = {AOSD technology,Linux kernel build system,build la},
pages = {461--464},
title = {{Co-evolution of source code and the build system}},
year = {2009}
}
@inproceedings{Adams:2010:ICC:1806799.1806846,
abstract = {Detailed knowledge about implemented concerns in the source code is crucial for the cost-effective maintenance and successful evolu- tion of large systems. Concern mining techniques can automati- cally suggest sets of related code fragments that likely contribute to the implementation of a concern. However, developers must then spend considerable time understanding and expanding these con- cern seeds to obtain the full concern implementation. We propose a new mining technique (COMMIT) that reduces this manual effort. COMMIT addresses three major shortcomings of current concern mining techniques: 1) their inability to merge seeds with small vari- ations, 2) their tendency to ignore important facets of concerns, and 3) their lack of information about the relations between seeds. A comparative case study on two large open source C systems (Post- greSQL and NetBSD) shows that COMMIT recovers up to 87.5\% more unique concerns than two leading concern mining techniques, and that the three techniques complement each other},
address = {New York, NY, USA},
annote = {                                                                        ARTIGO INCLUIDO.                                                                    
                          Este artigo ser\'{a} incluido                                                                                                                                                                                                                                                                                                                         por que o mesmo apresent\'{a} uma nova t\'{e}cnica de identifica\c{c}\~{a}o de crosscutting concerns chamada COMMIT.
Neste artigo tamb\'{e}m \'{e} feita uma compara\c{c}\~{a}o entre a nova t\'{e}ecnica (COMMIT) com outras duas t\'{e}cnicas de identifica\c{c}\~{a}o de crosscutting concerns, a saber: Clustering-Based Fan-in Analysis (CBFA) e History-based Aspect Mining (HAM).
        
Research questions:RQ1: What concern mining technique has been the primary study use?
Answer: COMMIT
RQ2: What empirical strategy has been employed into the primary study?
Answer: Case Study/comparative experiments
RQ3: IS COMMIT a technique programming-laguage specific?
Answer: Yes.
RQ4: What sort of analysis COMMIT performed, i.e., semantic, syntactic or both?
Answer: both.},
author = {Adams, Bram and Jiang, Zhen Ming and Hassan, Ahmed E},
booktitle = {Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering - Volume 1},
doi = {http://doi.acm.org/10.1145/1806799.1806846},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Adams, Jiang, Hassan/Proceedings of the 32nd ACMIEEE International Conference on Software Engineering - Volume 1/Adams, Jiang, Hassan - 2010 - Identifying crosscutting concerns using historical code changes.pdf:pdf},
isbn = {978-1-60558-719-6},
keywords = {concern mining,empirical research,mining software repositories},
pages = {305--314},
publisher = {ACM},
series = {ICSE '10},
title = {{Identifying crosscutting concerns using historical code changes}},
url = {http://doi.acm.org/10.1145/1806799.1806846},
year = {2010}
}
@inproceedings{Adams:2008:AMP:1404953.1404954,
abstract = {In systems software, the C preprocessor is heavily used to manage variability and improve efficiency. It is the primary tool to model crosscutting concerns in a very fine-grained way, but leads to extremely tangled and scattered preprocessor code. In this paper, we explore the process of aspect mining and extraction in the context of preprocessor-driven systems. Our aim is to identify both opportunities (extracting conditional compilation into advice) and pitfalls (mining on unpreprocessed code) in migrating preprocessor code to aspects. We distill five trade-offs which give a first impression about the usefulness of replacing the preprocessor by aspects. Preprocessor-driven systems prove to be a real challenge for aspect mining, but they could become on the other hand one of the most promising applications of AOP.},
address = {New York, NY, USA},
annote = {
        
        
        
          
        
        
          
            Artigo nao incluido
          
        
        
          
        
        
        
        

        
        
          Este artigo n\~{a}o ser\'{a} incluido. 
O artigo esta relacionado a minera\c{c}\~{a}o de interesses transvers\'{a}is, por\'{e}m n\~{a}o est\'{a} relacionado com c\'{o}digo fonte:

            
Crit\'{e}rio de exclus\~{a}o aplicado: 
EC 1: The primary study is about concern mining techniques. However the interest target are artifacts non related with source code;
        
        
      },
author = {Adams, Bram and {Van Rompaey}, Bart and Gibbs, Celina and Coady, Yvonne},
booktitle = {Proceedings of the 2008 AOSD workshop on Linking aspect technology and evolution},
doi = {http://doi.acm.org/10.1145/1404953.1404954},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Adams et al/Proceedings of the 2008 AOSD workshop on Linking aspect technology and evolution/Adams et al. - 2008 - Aspect mining in the presence of the C preprocessor.pdf:pdf},
isbn = {978-1-60558-147-7},
pages = {1:1----1:6},
publisher = {ACM},
series = {LATE '08},
title = {{Aspect mining in the presence of the C preprocessor}},
url = {http://doi.acm.org/10.1145/1404953.1404954},
year = {2008}
}
@article{Ali2008,
abstract = {Brito [8] argued that there are certain properties that the existing software development approaches are not able to modularize. Brito claimed, these properties cut across a large number of artefacts that compose the system. Therefore it is difficult to modularise them in separate modules. These properties are known as crosscutting aspect. Rosenhainer [7] defined aspects as modular artefacts that of crosscutting concerns, which is encapsulated into encapsulate crosscutting concerns. Aspect-oriented requirements engineering shows encouraging results in improving, identification, modularization and composition concerns. For instance, many techniques have been developed for crosscutting concern identification activity. This crucial requirements level. It avoids coupling activity is useful at the between requirements, improves traceability among requirements, eases function modularization, reduces software complexity, enhances the correctness of the software design, and most importantly it saves the cost Although the research area is still in its infancy, several techniques for crosscutting concern identification have already been developed. However, all of the techniques reviewed are based on semi-automated way. Human intervention is required to achieve the desired results using these techniques. Therefore this paper reviews the existing approaches on its effectiveness to solve this issue.},
annote = {
        
        
        
          
        
        
          
            NOT INCLUDED
          
        
        
          
        
        
        
        
This primary study was not included once we have applied the exclusion criteria EC2. In other words, the primary study is about crosscutting techniques but the interest target is not related to source code.},
author = {Ali, Busyairah Syd and Kasirun, Zarinah Mohd.},
doi = {10.1109/ICACTE.2008.13},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Ali, Kasirun/2008 International Conference on Advanced Computer Theory and Engineering/Ali, Kasirun - 2008 - A Review on Approaches for Identifying Crosscutting Concerns.pdf:pdf},
isbn = {978-0-7695-3489-3},
journal = {2008 International Conference on Advanced Computer Theory and Engineering},
month = dec,
pages = {855--859},
publisher = {Ieee},
title = {{A Review on Approaches for Identifying Crosscutting Concerns}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4737078},
year = {2008}
}
@inproceedings{Arora:2008:PIU:1593105.1593218,
abstract = {Software developers are frequently required to address evolving stakeholder concerns, which often result in changes to the source code of an application. Manually performing invasive modifications across a large code base can be tedious, time consuming, and error prone. Metaprogramming techniques assist a developer in specifying the changes needed to an application in a manner that does not require manual adaptation of source files. Various forms of metaprogramming exist, including compile-time metaobjects, load-time structural reflection, and aspect-oriented programming. In this paper, a profiler is implemented as a common case study using three different approaches to demonstrate the various mechanisms and benefits offered by metaprogramming.},
address = {New York, NY, USA},
annote = {Este artigo n\~{a}o sera incluido, pois o mesmo nao apresenta tecnicas de mineracao de interesses transversais.},
author = {Arora, Ritu and Sun, Yu and Demirezen, Zekai and Gray, Jeff},
booktitle = {Proceedings of the 46th Annual Southeast Regional Conference on XX},
doi = {http://doi.acm.org/10.1145/1593105.1593218},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Arora et al/Proceedings of the 46th Annual Southeast Regional Conference on XX/Arora et al. - 2008 - Profiler instrumentation using metaprogramming techniques.pdf:pdf},
isbn = {978-1-60558-105-7},
pages = {429--434},
publisher = {ACM},
series = {ACM-SE 46},
title = {{Profiler instrumentation using metaprogramming techniques}},
url = {http://doi.acm.org/10.1145/1593105.1593218},
year = {2008}
}
@inproceedings{5714415,
abstract = {Concept or feature identification, i.e., the identification of the
source code fragments implementing a particular feature, is a crucial
task during software understanding and maintenance. This paper proposes
an approach to identify concepts in execution traces by finding cohesive
and decoupled fragments of the traces. The approach relies on search-based
optimization techniques, textual analysis of the system source code
using latent semantic indexing, and trace compression techniques.
It is evaluated to identify features from execution traces of two
open source systems from different domains, JHotDraw and ArgoUML.
Results show that the approach is always able to identify trace segments
implementing concepts with a high precision and, for highly cohesive
concepts, with a high overlap with the manually-built oracle.},
annote = {Este artigo nao apresenta tecnica de mineracao de interesses transversais. E portanto nao sera lido na integra.},
author = {Asadi, F and {Di Penta}, M and Antoniol, G and Andhé andneuc, Y.-G.},
booktitle = {Software Maintenance and Reengineering (CSMR), 2010 14th European Conference on},
doi = {10.1109/CSMR.2010.17},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Asadi et al/Software Maintenance and Reengineering (CSMR), 2010 14th European Conference on/Asadi et al. - 2010 - A Heuristic-Based Approach to Identify Concepts in Execution Traces.pdf:pdf},
issn = {1534-5351},
keywords = {execution traces;feature identification;heuristic-},
pages = {31--40},
title = {{A Heuristic-Based Approach to Identify Concepts in Execution Traces}},
year = {2010}
}
@inproceedings{4362656,
abstract = {Aspect oriented programming (AOP) supports the cross-cutting of concerns
by means of aspects. The maintenance of AO systems may be more difficult
than 'traditional' ones, due to the large impact that aspects have
on the static structure and dynamic behavior of the overall system.
In this paper an inter-procedural aspect control flow graph is proposed
to represent the interactions among the aspects and the object oriented
(OO) components of an AO system. The graph allows an easier identification
of the impact between aspects and the OO components. It helps the
maintainer to identify sources of undesired side and ripple effects
in the code and avoid the introduction of new ones when modifying
an AOP system.},
annote = {
        Esse artigo nao sera incluido pois o mesmo nao trata de tecnicas de mineracao de interesses transversais. Artigo Duplicado
      },
author = {Bemardi, M L and {Di Lucca}, G A},
booktitle = {Software Maintenance, 2007. ICSM 2007. IEEE International Conference on},
doi = {10.1109/ICSM.2007.4362656},
issn = {1063-6773},
keywords = {AOP system maintenance;aspect oriented programming},
pages = {435--444},
title = {{An Interprocedural Aspect Control Flow Graph to Support the Maintenance of Aspect Oriented Systems}},
year = {2007}
}
@inproceedings{5328758,
abstract = {In Object Oriented systems the analysis of Type Hierarchies allows
to identify class members that are scattered and tangled along each
hierarchy, thus contributing to the implementation of static crosscutting
concerns. This paper presents ConAn: a tool to automatically analyze
the Type Hierarchies in an existing system and to identify the Type
Fragments (i.e. a portion of a Type in terms of its members and relationships)
implementing static crosscutting concerns. The structural information
about the Type Fragments composing each concern and the crosscutting
relationships among them are useful to drive their re-engineering
towards Aspects.},
annote = {artigo incluido.},
author = {Bernardi, M L and {Di Lucca}, G A},
booktitle = {Reverse Engineering, 2009. WCRE '09. 16th Working Conference on},
doi = {10.1109/WCRE.2009.38},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Bernardi, Di Lucca/Reverse Engineering, 2009. WCRE '09. 16th Working Conference on/Bernardi, Di Lucca - 2009 - ConAn A Tool for the Identification of Crosscutting Concerns in Object Oriented Systems Based on Type Hierarchy Analysis.pdf:pdf},
issn = {1095-1350},
keywords = {ConAn;aspect oriented system;object oriented syste},
pages = {319--320},
title = {{ConAn: A Tool for the Identification of Crosscutting Concerns in Object Oriented Systems Based on Type Hierarchy Analysis}},
year = {2009}
}
@article{Bernardi2007,
annote = {
        Esse artigo nao sera incluido pois o mesmo nao trata de tecnicas de mineracao de interesses transversais. Artigo Duplicado
      },
author = {Bernardi, Mario Luca and Antonio, Giuseppe and Lucca, Di},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Bernardi, Antonio, Lucca/Work/Bernardi, Antonio, Lucca - 2007 - An Interprocedural Aspect Control Flow Graph to Support the Maintenance of Aspect Oriented Systems.pdf:pdf},
isbn = {1424412560},
journal = {Work},
keywords = {aspect oriented,software maintenance},
title = {{An Interprocedural Aspect Control Flow Graph to Support the Maintenance of Aspect Oriented Systems}},
year = {2007}
}
@inproceedings{Bernardi:2010:CTI:1846454.1847940,
abstract = {This paper presents the main features of ConAn, a tool supporting an approach to find scattered and tangled class members in OO systems and to group them in concerns. The recovered information is useful for refactoring/migration tasks, such as towards Aspect Oriented Programming (AOP).},
address = {Washington, DC, USA},
annote = {artigo incluido},
author = {Bernardi, Mario Luca and {Di Lucca}, Giuseppe Antonio},
booktitle = {Proceedings of the 2010 IEEE 18th International Conference on Program Comprehension},
doi = {http://dx.doi.org/10.1109/ICPC.2010.34},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Bernardi, Di Lucca/Proceedings of the 2010 IEEE 18th International Conference on Program Comprehension/Bernardi, Di Lucca - 2010 - The ConAn Tool to Identify Crosscutting Concerns in Object Oriented Systems.pdf:pdf},
isbn = {978-0-7695-4113-6},
keywords = {Aspect Oriented Programming,Program Comprehension,Reverse Engineering},
pages = {48--49},
publisher = {IEEE Computer Society},
series = {ICPC '10},
title = {{The ConAn Tool to Identify Crosscutting Concerns in Object Oriented Systems}},
url = {http://dx.doi.org/10.1109/ICPC.2010.34},
year = {2010}
}
@inproceedings{Bernardi:2009:RCC:1595808.1595822,
abstract = {A key step in the evolution of a Java system towards the aspect oriented paradigm is the identification of crosscutting concerns that need to be refactored. This paper proposes an approach to identify concerns and the crosscutting among them in existing Java systems. A meta-model is defined to represent concerns as sets of Type Fragments (where a Type Fragment is a portion of a Type in terms of its members, properties and relationships). The approach exploits the concept of Role: each Role is associated to a concern and the system source code is analyzed to find the Type Fragments implementing it. All the Roles that contribute to implement a same semantic concern are grouped together by a clustering algorithm based on a combination of a structural and a lexical distance. Each cluster of Roles (and thus the Type Fragments associated to them) is assigned to a single more abstract concern. Crosscutting is detected looking for scattering and tangling of Type Fragments within the identified concerns. The structural information about the Type Fragments assigned to each concern and the crosscutting relationships among the concerns can be used to drive the refactoring towards aspects. The results from a case study where the approach has been applied to several software systems are presented and discussed.},
address = {New York, NY, USA},
annote = {Artigo incluido.},
author = {Bernardi, Mario Luca and {Di Lucca}, Giuseppe Antonio},
booktitle = {Proceedings of the joint international and annual ERCIM workshops on Principles of software evolution (IWPSE) and software evolution (Evol) workshops},
doi = {http://doi.acm.org/10.1145/1595808.1595822},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Bernardi, Di Lucca, Bernardi M.L/Proceedings of the joint international and annual ERCIM workshops on Principles of software evolution (IWPSE) and software evolution (Evol) workshops/Bernardi, Di Lucca, Bernardi M.L. - 2009 - A role-based crosscutting concerns mining approach to evolve Java systems towards AOP.pdf:pdf},
isbn = {978-1-60558-678-6},
keywords = {aspect mining,aspect oriented programming,mof,reverse engineering,software evolution},
pages = {63--72},
publisher = {ACM},
series = {IWPSE-Evol '09},
title = {{A role-based crosscutting concerns mining approach to evolve Java systems towards AOP}},
url = {http://doi.acm.org/10.1145/1595808.1595822},
year = {2009}
}
@inproceedings{Bernardi:2009:RCC:1595808.1595822,
abstract = {A key step in the evolution of a Java system towards the aspect oriented paradigm is the identification of crosscutting concerns that need to be refactored. This paper proposes an approach to identify concerns and the crosscutting among them in existing Java systems. A meta-model is defined to represent concerns as sets of Type Fragments (where a Type Fragment is a portion of a Type in terms of its members, properties and relationships). The approach exploits the concept of Role: each Role is associated to a concern and the system source code is analyzed to find the Type Fragments implementing it. All the Roles that contribute to implement a same semantic concern are grouped together by a clustering algorithm based on a combination of a structural and a lexical distance. Each cluster of Roles (and thus the Type Fragments associated to them) is assigned to a single more abstract concern. Crosscutting is detected looking for scattering and tangling of Type Fragments within the identified concerns. The structural information about the Type Fragments assigned to each concern and the crosscutting relationships among the concerns can be used to drive the refactoring towards aspects. The results from a case study where the approach has been applied to several software systems are presented and discussed. Copyright 2009 ACM.},
address = {New York, NY, USA},
annote = {Artigo incluido.     
        
        From Duplicate 1 (                           A role-based crosscutting concerns mining approach to evolve Java systems towards AOP                         - Bernardi, Mario Luca; Di Lucca, Giuseppe Antonio; Bernardi M.L., Di Lucca G A )
                
        From Duplicate 1 (                           A role-based crosscutting concerns mining approach to evolve java systems towards AOP                         - Bernardi, Mario Luca; Di Lucca, Giuseppe Antonio; Bernardi M.L., Di Lucca G A )
                
        From Duplicate 1 (                           A role-based crosscutting concerns mining approach to evolve java systems towards AOP                         - Bernardi M.L., Di Lucca G A )
                
cited By (since 1996) 1; Conference of Joint International and Annual ERCIM Workshops on Principles of Software Evolution and Software Evolution, IWPSE-Evol'09; Conference Date: 24 August 2009 through 25 August 2009; Conference Code: 77988
        
        
Artigo incluido
        
        
        
        
      },
author = {Bernardi, Mario Luca and {Di Lucca}, Giuseppe Antonio and {Bernardi M.L.}, Di Lucca G A},
booktitle = {Proceedings of the joint international and annual ERCIM workshops on Principles of software evolution (IWPSE) and software evolution (Evol) workshops},
doi = {http://doi.acm.org/10.1145/1595808.1595822},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Bernardi, Di Lucca, Bernardi M.L/Proceedings of the joint international and annual ERCIM workshops on Principles of software evolution (IWPSE) and software evolution (Evol) workshops/Bernardi, Di Lucca, Bernardi M.L. - 2009 - A role-based crosscutting concerns mining approach to evolve Java systems towards AOP.pdf:pdf},
isbn = {978-1-60558-678-6},
keywords = {Aspect-Oriented Programming,Aspect-oriented,Clustering algorithms,Computer software,Computer systems programming,Crosscutting concern,Java programming language,Java system,Meta model,Reengineering,Refactorings,Role-based,Software systems,Source codes,Structural information,Technical presentations,aop allows the sepa-,as-,aspect mining,aspect oriented programming,dilucca,indeed,it,logging,mof,pect mining,reverse engineering,software evolution,synchronization,unisannio},
pages = {63--72},
publisher = {ACM},
series = {IWPSE-Evol '09},
title = {{A role-based crosscutting concerns mining approach to evolve Java systems towards AOP}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-70549090048\&partnerID=40\&md5=05e222a5154b3f357fe7f6cab46e4e73 http://doi.acm.org/10.1145/1595808.1595822 http://portal.acm.org/citation.cfm?doid=1595808.1595822},
year = {2009}
}
@inproceedings{Bernardi:2009:AOT:1694773.1694801,
abstract = {In Object Oriented (OO) systems super-imposition is a way to implement crosscutting concerns that introduce scattering and tangling of code components among the Types implemented along Type Hierarchies. This paper presents the results of the analysis of a set of existing Java systems to confirm and verify this assumption. The analysis was carried out exploiting a method to automatically analyse and identify the Type Fragments implementing static crosscutting concerns in OO systems.},
address = {Berlin, Heidelberg},
annote = {Artigo Incluido},
author = {Bernardi, Mario Luca and Lucca, Giuseppe Antonio},
booktitle = {Proceedings of the 1st International Conference on Future Generation Information Technology},
doi = {http://dx.doi.org/10.1007/978-3-642-10509-8\_25},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Bernardi, Lucca/Proceedings of the 1st International Conference on Future Generation Information Technology/Bernardi, Lucca - 2009 - Analysing Object Type Hierarchies to Identify Crosscutting Concerns.pdf:pdf},
isbn = {978-3-642-10508-1},
keywords = {Aspect Mining,Aspect Oriented Programming,Code Analysis,MOF,Reverse Engineering,Software Evolution},
pages = {216--224},
publisher = {Springer-Verlag},
series = {FGIT '09},
title = {{Analysing Object Type Hierarchies to Identify Crosscutting Concerns}},
url = {http://dx.doi.org/10.1007/978-3-642-10509-8\_25},
year = {2009}
}
@inproceedings{4556136,
abstract = {Although object-oriented programming promotes reusable and well factored
entity decomposition, industrial software often shows traces of lack
of object-oriented design and procedural thinking. This results in
domain entity scattered and tangled code. This is often true in data
intensive applications. Aspect mining techniques search for various
patterns of scattered and tangled code pertaining to crosscutting
concerns. However, in the presence of non-abstracted domain logic,
the crosscutting concerns identified are inaccurately related to
aspects since lack of 00 abstraction introduces false positives.
This paper identifies the difficulty of identifying crosscutting
concerns in systems lacking elementary object-oriented structure.
It presents an approach classifying various crosscutting concerns.
We report our experience on an industrial software system.},
annote = {Artigo incluido.},
author = {Bhatti, M U and Ducasse, S and Rashid, A},
booktitle = {Program Comprehension, 2008. ICPC 2008. The 16th IEEE International Conference on},
doi = {10.1109/ICPC.2008.45},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Bhatti, Ducasse, Rashid/Program Comprehension, 2008. ICPC 2008. The 16th IEEE International Conference on/Bhatti, Ducasse, Rashid - 2008 - Aspect Mining in Procedural Object Oriented Code.pdf:pdf},
issn = {1063-6897},
keywords = {Aspect mining;crosscutting concerns;entity decompo},
pages = {230--235},
title = {{Aspect Mining in Procedural Object Oriented Code}},
year = {2008}
}
@inproceedings{Bhatti:2008:MCD:1404953.1404955,
abstract = {Crosscutting concerns appear in software system due to the inherent inadequacy of OOP mechanisms to capture them in suitable encapsulating units. This results in scattered and tangled code. One more form of scattering and tangling may result from the absence of OOP abstractions for domain entities of a software. These non-encapsulated domain enti- ties end up scattered and tangled, appearing as crosscutting concerns in code. Aspect mining techniques automate the task of search for possible aspects in the code and falsely at- tribute all the crosscutting code to aspects even when these scattered concerns point to the absence of a domain abstrac- tion. This paper discusses the application of aspect mining in the presence crosscutting code originating from the ab- sence of aspects and OOP abstractions. A roadmap of a possible solution is provided to distinguish these two types of code scattering.},
address = {New York, NY, USA},
annote = {Artigo Incluido},
author = {Bhatti, Muhammad Usman and Ducasse, St\'{e}phane},
booktitle = {Proceedings of the 2008 AOSD workshop on Linking aspect technology and evolution},
doi = {http://doi.acm.org/10.1145/1404953.1404955},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Bhatti, Ducasse/Proceedings of the 2008 AOSD workshop on Linking aspect technology and evolution/Bhatti, Ducasse - 2008 - Mining and classification of diverse crosscutting concerns.pdf:pdf},
isbn = {978-1-60558-147-7},
keywords = {aspect mining,crosscutting concerns,reverse engineering},
pages = {2:1----2:5},
publisher = {ACM},
series = {LATE '08},
title = {{Mining and classification of diverse crosscutting concerns}},
url = {http://doi.acm.org/10.1145/1404953.1404955},
year = {2008}
}
@article{Bhatti2008,
annote = {Artigo Incluido},
author = {Bhatti, Muhammad Usman and Ducasse, St\'{e}phane and Rashid, Awais},
doi = {10.1109/ICPC.2008.45},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Bhatti, Ducasse, Rashid/Program Comprehension, 2008. ICPC 2008. The 16th IEEE International Conference on/Bhatti, Ducasse, Rashid - 2008 - Aspect Mining in Procedural Object Oriented Code.pdf:pdf},
isbn = {978-0-7695-3176-2},
journal = {2008 The 16th IEEE International Conference on Program Comprehension},
month = jun,
pages = {230--235},
publisher = {Ieee},
title = {{Aspect Mining in Procedural Object Oriented Code}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4556136},
year = {2008}
}
@inproceedings{Binkley:2005:ARO:1090952.1091839,
abstract = {This paper presents a human-guided automated approach to refactoring object oriented programs to the aspect oriented paradigm. The approach is based upon the iterative application of four steps: discovery, enabling, selection, and refactoring. After discovering potentially applicable refactorings, the enabling step transforms the code to improve refactorability. During the selection phase the particular refactorings to apply are chosen. Finally, the refactoring phase transforms the code by moving the selected code to a new aspect. This paper presents the results of an evaluation in which one of the crosscutting concerns of a 40,000 LoC program (JHotDraw) is refactored.},
address = {Washington, DC, USA},
annote = {Artigo incluido/},
author = {Binkley, Dave and Ceccato, Mariano and Harman, Mark and Ricca, Filippo and Tonella, Paolo},
booktitle = {Proceedings of the 21st IEEE International Conference on Software Maintenance},
doi = {10.1109/ICSM.2005.27},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Binkley et al/Proceedings of the 21st IEEE International Conference on Software Maintenance/Binkley et al. - 2005 - Automated Refactoring of Object Oriented Code into Aspects.pdf:pdf},
isbn = {0-7695-2368-4},
pages = {27--36},
publisher = {IEEE Computer Society},
title = {{Automated Refactoring of Object Oriented Code into Aspects}},
url = {http://dl.acm.org/citation.cfm?id=1090952.1091839},
year = {2005}
}
@article{Binkley:2006:TRE:1248725.1248765,
abstract = {Aspect-Oriented Programming (AOP) provides mechanisms for the separation of crosscutting concerns—functionalities scattered through the system and tangled with the base code. Existing systems are a natural testbed for the AOP approach since they often contain several crosscutting concerns which could not be modularized using traditional programming constructs. This paper presents an automated approach to the problem of migrating systems developed according to the Object-Oriented Programming (OOP) paradigm into Aspect-Oriented Programming (AOP). A simple set of six refactorings has been defined to transform OOP to AOP and has been implemented in the AOP-Migrator tool, an Eclipse plug-in. A set of enabling transformations from OOP to OOP complement the initial set of refactorings. The paper presents the results of four case studies, which use the approach to migrate selected crosscutting concerns from medium-sized Java programs (in the range of 10K to 40K lines of code) into equivalent programs in AspectJ. The case study results show the feasibility of the migration and indicate the importance of the enabling transformations as a preprocessing step.},
address = {Piscataway, NJ, USA},
annote = {Este artigo n\~{a}ao ser\'{a}a incluido pois o mesmo trate de refactoring de sistema OO para OA e n\~{a}ao tecnicas/metodo/abordagem de minera\c{c}\~{a}ao de interesses transversais.},
author = {Binkley, David and Ceccato, Mariano and Harman, Mark and Ricca, Filippo and Tonella, Paolo},
doi = {10.1109/TSE.2006.95},
issn = {0098-5589},
journal = {IEEE Trans. Softw. Eng.},
keywords = {Aspect-oriented software development,program transformation.,refactoring},
number = {9},
pages = {698--717},
publisher = {IEEE Press},
title = {{Tool-Supported Refactoring of Existing Object-Oriented Code into Aspects}},
url = {http://dl.acm.org/citation.cfm?id=1248725.1248765},
volume = {32},
year = {2006}
}
@article{springerlink:10.1007/s00450-005-0179-7,
abstract = {Aspect-oriented programming can decrease the complexity and improve
maintainability and extensibility of software systems by encapsulating
crosscutting concerns into aspects. Aspect mining tries to identify
these crosscutting concerns in existing systems and thus supports
their migration to an aspect-oriented design. This article describes
the methods and results of several case studies which investigated
the dynamic program analysis approch presented in [?, ?]. This includes
the description of the algorithms. The approach uses program traces
that are generated in different program executions and abstracted
into execution relations. The resulting data pool is then investigated
for recurring execution patterns. Different constraints specify when
a pattern is considered to be recurring. The approach has been implemented
in the fully automatic analysis tool DynAMiT and has been evaluated
in several case studies conducted with software systems of more than
80 kLoC. DynAMiT was able to identify both existing and seeded crosscutting
concerns},
annote = {Artigo Nao ser\'{a}a incluido pois o mesmo n\~{a}ao esta escrito nem em ingles e nem em portugues.},
author = {Breu, Silvia},
issn = {0178-3564},
journal = {Informatik - Forschung und Entwicklung},
number = {3},
pages = {162--172},
publisher = {Springer Berlin / Heidelberg},
title = {{Dynamisches Aspekt-Mining: Methoden und Fallstudien}},
url = {http://dx.doi.org/10.1007/s00450-005-0179-7},
volume = {19},
year = {2005}
}
@inproceedings{Breu:2004:AMU:1025115.1025235,
abstract = {Aspect mining tries to identify crosscutting concerns in existing systems and thus supports the adaption to an aspect-oriented design. This paper describes the first as- pect mining approach that detects crosscutting concerns in legacy systems based on dynamic analysis. The analysis uses program traces that are generated in different programexecutions as underlying data pool. These traces are then investigated for recurring execution patterns based on different constraints, such as the requirement that the patterns have to exist in different calling contexts in the programtrace. The implemented approach was evaluated in several case studies over systems with more than 80 kLoC. The tool was able to identify automatically both existing and seeded crosscutting concerns.},
address = {Washington, DC, USA},
annote = {Artigo incluido.},
author = {Breu, Silvia and Krinke, Jens},
booktitle = {Proceedings of the 19th IEEE international conference on Automated software engineering},
doi = {10.1109/ASE.2004.12},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Breu, Krinke/Proceedings of the 19th IEEE international conference on Automated software engineering/Breu, Krinke - 2004 - Aspect Mining Using Event Traces.pdf:pdf},
isbn = {0-7695-2131-2},
pages = {310--315},
publisher = {IEEE Computer Society},
title = {{Aspect Mining Using Event Traces}},
url = {http://dl.acm.org/citation.cfm?id=1025115.1025235},
year = {2004}
}
@article{Breu2006,
abstract = {Aspect mining identifies cross-cutting concerns in a program to help migrating it to an aspect-oriented de- sign. Such concerns may not exist from the beginning, but emerge over time. By analysing where developers add code to a program, our history-based aspect mining (HAM) identifies and ranks cross-cutting concerns. We evaluated the effectiveness of our approach with the history of three open-source projects. HAM scales up to industrial-sized projects: for example, we were able to identify a locking concern that cross-cuts 1 284 methods in Eclipse. Additionally, the precision of HAM increases with project size and history; for Eclipse, it reaches 90\% for the top-10 candidates.},
annote = {Artigo Incluido},
author = {Breu, Silvia and Zimmermann, Thomas},
doi = {10.1109/ASE.2006.50},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Breu, Zimmermann/21st IEEEACM International Conference on Automated Software Engineering (ASE'06)/Breu, Zimmermann - 2006 - Mining Aspects from Version History.pdf:pdf},
isbn = {0-7695-2579-2},
journal = {21st IEEE/ACM International Conference on Automated Software Engineering (ASE'06)},
pages = {221--230},
publisher = {Ieee},
title = {{Mining Aspects from Version History}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4019577},
volume = {76595},
year = {2006}
}
@inproceedings{Breu:2006:AML:1176617.1176651,
abstract = {As software evolves, new functionality sometimes no longer aligns with the original design, ending up scattered across a program. We find such cross-cutting concerns by applying formal concept analysis to the program’s history: method calls added across many locations are likely to be cross-cutting. Our approach scales up to Eclipse.},
address = {New York, NY, USA},
annote = {Artigo nao sera incluido com base no criterio de exclusao 5, que diz:
The primary study is a poster publication or a tutorial;},
author = {Breu, Silvia and Zimmermann, Thomas and Lindig, Christian},
booktitle = {Companion to the 21st ACM SIGPLAN symposium on Object-oriented programming systems, languages, and applications},
doi = {http://doi.acm.org/10.1145/1176617.1176651},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Breu, Zimmermann, Lindig/Companion to the 21st ACM SIGPLAN symposium on Object-oriented programming systems, languages, and applications/Breu, Zimmermann, Lindig - 2006 - Aspect mining for large systems.pdf:pdf},
isbn = {1-59593-491-X},
keywords = {CVS,aspect mining,aspect-oriented programming,eclipse,formal concept analysis,java,mining version archives},
pages = {641--642},
publisher = {ACM},
series = {OOPSLA '06},
title = {{Aspect mining for large systems}},
url = {http://doi.acm.org/10.1145/1176617.1176651},
year = {2006}
}
@inproceedings{Breu:2006:HCC:1188835.1188840,
abstract = {As programs evolve, newly added functionality sometimes no longer aligns with the original design, ending up scattered across the software system. Aspect mining tries to identify such cross-cutting concerns in a program to support maintenance, or as a first step towards an aspect-oriented program. Previous approaches to aspect mining applied static or dynamic program analysis techniques to a single version of a system. We exploit all versions from a system's CVS history to mine aspect candidates; we are about to extend our research prototype to an Eclipse plug-in called HAM: when a single CVS commit adds calls to the same (small) set of methods in many unrelated locations, these method calls are likely to be cross-cutting. HAM employs formal concept analysis to identify aspect candidates. Analysing one commit operation at a time makes the approach scale to industrial-sized programs. In an evaluation we mined cross-cutting concerns from Eclipse 3.2M3 and found that up to 90\% of the top-10 aspect candidates are truly cross-cutting concerns.},
address = {New York, NY, USA},
annote = {Artigo incluido.},
author = {Breu, Silvia and Zimmermann, Thomas and Lindig, Christian},
booktitle = {Proceedings of the 2006 OOPSLA workshop on eclipse technology eXchange},
doi = {http://doi.acm.org/10.1145/1188835.1188840},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Breu, Zimmermann, Lindig/Proceedings of the 2006 OOPSLA workshop on eclipse technology eXchange/Breu, Zimmermann, Lindig - 2006 - HAM cross-cutting concerns in Eclipse.pdf:pdf},
isbn = {1-59593-621-1},
keywords = {CVS,Eclipse,aspect mining,aspect-oriented programming,formal concept analysis,java,mining version archives},
pages = {21--24},
publisher = {ACM},
series = {eclipse '06},
title = {{HAM: cross-cutting concerns in Eclipse}},
url = {http://doi.acm.org/10.1145/1188835.1188840},
year = {2006}
}
@article{Bruno2007,
annote = {Artigo nao incluido. 

        
Muito da exclusao: artigo nao tem mais do que duas paginas.},
author = {Bruno, Fondazione and Irst, Kessler},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Bruno, Irst/Reverse Engineering/Bruno, Irst - 2007 - Migrating Object Oriented code to Aspect Oriented Programming Mariano Ceccato.pdf:pdf},
isbn = {1424412560},
journal = {Reverse Engineering},
keywords = {[Electronic Manuscript]},
pages = {497--498},
title = {{Migrating Object Oriented code to Aspect Oriented Programming Mariano Ceccato}},
year = {2007}
}
@article{Bruno2008,
annote = {Incluido},
author = {Bruno, Fondazione and Irst, Kessler},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Bruno, Irst/Unknown/Bruno, Irst - 2008 - Automatic Support for the Migration Towards Aspects Mariano Ceccato.pdf:pdf},
isbn = {9781424421572},
pages = {298--301},
title = {{Automatic Support for the Migration Towards Aspects Mariano Ceccato}},
year = {2008}
}
@inproceedings{1374335,
abstract = { We evaluate the benefits of applying aspect-oriented software development
techniques in the context of a large-scale industrial embedded software
system implementing a number of crosscutting concerns. Additionally,
we assess the feasibility of automatically extracting these crosscutting
concerns from the source code. In order to achieve this, we present
an approach for reverse engineering aspects from an ordinary application
automatically. This approach incorporates both a concern verification
and an aspect construction phase. Our results show that such automated
support is feasible, and can lead to significant improvements in
source code quality.},
annote = {Artigo nao sera incluido. O criterio de exclusao aplicado nesse artigo foi:

        
The primary study is a short paper (papers with less thanfour pages);},
author = {Bruntink, M and van Deursen, A and Tourwe, T},
booktitle = {Reverse Engineering, 2004. Proceedings. 11th Working Conference on},
doi = {10.1109/WCRE.2004.12},
issn = {1095-1350},
keywords = {aspect construction; aspect-oriented software deve},
pages = {306--307},
title = {{An initial experiment in reverse engineering aspects}},
year = {2004}
}
@inproceedings{1357804,
abstract = {Code implementing a crosscutting concern is often spread over many different parts of an application. Identifying such code automatically greatly improves both the maintainability and the evolvability of the application. First of all, it allows a developer to more easily find the places in the code that must be changed when the concern changes, and thus makes such changes less time consuming and less prone to errors. Second, it allows a developer to refactor the code, so that it uses modern and more advanced abstraction mechanisms, thereby restoring its modularity. We evaluate the suitability of clone detection as a technique for the identification of crosscutting concerns. To that end, we manually identify four specific concerns in an industrial C application, and analyze to what extent clone detection is capable of finding these concerns. We consider our results as a stepping stone toward an automated "concern miner" based on clone detection.},
annote = {Artigo incluido.},
author = {Bruntink, M and van Deursen, A and Tourwe, T and van Engelen, R},
booktitle = {Software Maintenance, 2004. Proceedings. 20th IEEE International Conference on},
doi = {10.1109/ICSM.2004.1357804},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Bruntink et al/Software Maintenance, 2004. Proceedings. 20th IEEE International Conference on/Bruntink et al. - 2004 - An Evaluation of Clone Detection Techniques for Identifying Crosscutting Concerns.pdf:pdf},
issn = {1063-6773},
keywords = {automated concern miner,clone detection,code ref},
pages = {200--209},
title = {{An Evaluation of Clone Detection Techniques for Identifying Crosscutting Concerns}},
year = {2004}
}
@inproceedings{Bruntink:2007:SCC:1218563.1218586,
abstract = {This paper describes a method for studying idioms-based implementations of crosscutting concerns, and our experiences with it in the context of a real-world, large-scale embedded software system. In particular, we analyse a seemingly simple concern, tracing, and show that it exhibits significant variability, despite the use of a prescribed idiom. We discuss the consequences of this variability in terms of how aspect-oriented software development techniques could help prevent it, how it paralyses (automated) migration efforts, and which aspect language features are required in order to obtain precise and concise aspects. Additionally, we elaborate on the representativeness of our results and on the usefulness of our proposed method.},
address = {New York, NY, USA},
annote = {Artigo nao incluido, pois o mesmo nao apresenta uma 
tecnica de mineracao de interesse transversal.},
author = {Bruntink, Magiel and van Deursen, Arie and D'Hondt, Maja and Tourw\'{e}, Tom},
booktitle = {Proceedings of the 6th international conference on Aspect-oriented software development},
doi = {http://doi.acm.org/10.1145/1218563.1218586},
file = {::},
isbn = {1-59593-615-7},
keywords = {@reverse engineering,aspect-oriented programming,cross-cutting concerns,formal concept analysis,idioms,reengineering,restructuring,variability},
pages = {199--211},
publisher = {ACM},
series = {AOSD '07},
title = {{Simple crosscutting concerns are not so simple: analysing variability in large-scale idioms-based implementations}},
url = {http://doi.acm.org/10.1145/1218563.1218586},
year = {2007}
}
@inproceedings{Bruntink:2005:IIC:1090952.1091840,
abstract = {This paper reports on our experience in automatically migrating the crosscutting concerns of a large-scale software system, written in C, to an aspect-oriented implementation. We present a systematic approach for isolating crosscutting concerns, and illustrate this approach by zooming in on one particular crosscutting concern. Additionally, we compare the already existing solution to the aspect-oriented solution, and discuss advantages as well as disadvantages of both in terms of selected quality attributes. Our results show that automated migration is feasible, and that adopting an aspect-oriented approach can lead to significant improvements in source code quality, if carefully designed and managed.},
address = {Washington, DC, USA},
annote = {artigo incluido.},
author = {Bruntink, Magiel and van Deursen, Arie and Tourwe, Tom},
booktitle = {Proceedings of the 21st IEEE International Conference on Software Maintenance},
doi = {10.1109/ICSM.2005.57},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Bruntink, van Deursen, Tourwe/Proceedings of the 21st IEEE International Conference on Software Maintenance/Bruntink, van Deursen, Tourwe - 2005 - Isolating Idiomatic Crosscutting Concerns.pdf:pdf},
isbn = {0-7695-2368-4},
pages = {37--46},
publisher = {IEEE Computer Society},
title = {{Isolating Idiomatic Crosscutting Concerns}},
url = {http://dl.acm.org/citation.cfm?id=1090952.1091840},
year = {2005}
}
@article{Bruntink:2005:UCD:1100866.1100978,
abstract = {In systems developed without aspect-oriented programming, code implementing a crosscutting concern may be spread over many different parts of a system. Identifying such code automatically could be of great help during maintenance of the system. First of all, it allows a developer to more easily find the places in the code that must be changed when the concern changes and, thus, makes such changes less time consuming and less prone to errors. Second, it allows the code to be refactored to an aspect-oriented solution, thereby improving its modularity. In this paper, we evaluate the suitability of clone detection as a technique for the identification of crosscutting concerns. To that end, we manually identify five specific crosscutting concerns in an industrial C system and analyze to what extent clone detection is capable of finding them. We consider our results as a stepping stone toward an automated "aspect miner¿ based on clone detection.},
address = {Piscataway, NJ, USA},
annote = {Artigo incluido.},
author = {Bruntink, Magiel and van Deursen, Arie and van Engelen, Remco and Tourwe, Tom},
doi = {10.1109/TSE.2005.114},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Bruntink et al/IEEE Trans. Softw. Eng/Bruntink et al. - 2005 - On the Use of Clone Detection for Identifying Crosscutting Concern Code.pdf:pdf},
issn = {0098-5589},
journal = {IEEE Trans. Softw. Eng.},
keywords = {Index Terms- Clone detection,aspect mining.,aspect-oriented programming,crosscutting concerns,reverse engineering},
number = {10},
pages = {804--818},
publisher = {IEEE Press},
title = {{On the Use of Clone Detection for Identifying Crosscutting Concern Code}},
url = {http://dl.acm.org/citation.cfm?id=1100866.1100978},
volume = {31},
year = {2005}
}
@inproceedings{Canfora:2006:ULC:1172962.1172998,
abstract = {Crosscutting concerns are software system features whose implementation is spread across many modules as tangled and scattered code. Identifying such code helps developers to change the concern and/or re-factor it to an aspect. This paper evaluates the suitability of line co-change as a technique for the identification of crosscutting concerns. A line co-change aim at identifying source code lines that have been changed together in a commit transaction performed using a versioning system such as CVS. Promising results have been obtained by evaluating the approach to identify four crosscutting concerns present in an opensource system, JHotDraw. The paper also shows that line co-change can be effectively complemented with clone detection to improve the performance achieved by the separate approaches.},
address = {Washington, DC, USA},
annote = {Artigo incluido.},
author = {Canfora, Gerardo and Cerulo, Luigi and {Di Penta}, Massimiliano},
booktitle = {Proceedings of the 22nd IEEE International Conference on Software Maintenance},
doi = {10.1109/ICSM.2006.43},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Canfora, Cerulo, Di Penta/Proceedings of the 22nd IEEE International Conference on Software Maintenance/Canfora, Cerulo, Di Penta - 2006 - On the Use of Line Co-change for Identifying Crosscutting Concern Code.pdf:pdf},
isbn = {0-7695-2354-4},
pages = {213--222},
publisher = {IEEE Computer Society},
title = {{On the Use of Line Co-change for Identifying Crosscutting Concern Code}},
url = {http://dl.acm.org/citation.cfm?id=1172962.1172998},
year = {2006}
}
@article{Canfora:2011:ACS:1924421.1924451,
abstract = {Deeply understanding the intricacies of software must always come before any considerations for modifying it.},
address = {New York, NY, USA},
annote = {Artigo n\~{a}ao ser\'{a}a incluido. Porem o mesmo
\'{e}e interessante de ler lido pois fala sobre
engenharia reversa nos dias de hoje.},
author = {Canfora, Gerardo and {Di Penta}, Massimiliano and Cerulo, Luigi},
doi = {http://doi.acm.org/10.1145/1924421.1924451},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Canfora, Di Penta, Cerulo/Commun. ACM/Canfora, Di Penta, Cerulo - 2011 - Achievements and challenges in software reverse engineering.pdf:pdf},
issn = {0001-0782},
journal = {Commun. ACM},
number = {4},
pages = {142--151},
publisher = {ACM},
title = {{Achievements and challenges in software reverse engineering}},
url = {http://doi.acm.org/10.1145/1924421.1924451},
volume = {54},
year = {2011}
}
@inproceedings{4362668,
abstract = {Aspect oriented programming (AOP) is a new programming paradigm that
offers a novel modularization unit for the crosscutting concerns.
Functionalities originally spread across several modules and tangled
with each other can be factored out into a single, separate unit,
called an aspect. We investigated automated techniques that can be
used to support the migration of existing Object Oriented Programming
(OOP) code to AOP. To migrate an application to the new paradigm,
a preliminary identification of the cross-cutting concerns is required
(aspect mining). Then refactoring is applied to transform the scattered
concerns into aspects. The proposed methods have been assessed on
case studies for a total of more than half a million lines of code.},
annote = {Artigo ser\'{a}a incluido.},
author = {Ceccato, M},
booktitle = {Software Maintenance, 2007. ICSM 2007. IEEE International Conference on},
doi = {10.1109/ICSM.2007.4362668},
issn = {1063-6773},
keywords = {aspect oriented programming;crosscutting concern;m},
pages = {497--498},
title = {{Migrating Object Oriented code to Aspect Oriented Programming}},
year = {2007}
}
@article{Ceccato:2006:ACT:1147798.1147833,
abstract = {Understanding a software system at source-code level requires understanding the different concerns that it addresses, which in turn requires a way to identify these concerns in the source code. Whereas some concerns are explicitly represented by program entities (like classes, methods and variables) and thus are easy to identify, crosscutting concerns are not captured by a single program entity but are scattered over many program entities and are tangled with the other concerns. Because of their crosscutting nature, such crosscutting concerns are difficult to identify, and reduce the understandability of the system as a whole. In this paper, we report on a combined experiment in which we try to identify crosscutting concerns in the JHotDraw framework automatically. We first apply three independently developed aspect mining techniques to JHotDraw and evaluate and compare their results. Based on this analysis, we present three interesting combinations of these three techniques, and show how these combinations provide a more complete coverage of the detected concerns as compared to the original techniques individually. Our results are a first step towards improving the understandability of a system that contains crosscutting concerns, and can be used as a basis for refactoring the identified crosscutting concerns into aspects.},
address = {Hingham, MA, USA},
annote = {artigo incluido},
author = {Ceccato, M and Marin, M and Mens, K and Moonen, L and Tonella, P and Tourw\'{e}, T},
doi = {10.1007/s11219-006-9217-3},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Ceccato et al/Software Quality Journal/Ceccato et al. - 2006 - Applying and combining three different aspect Mining Techniques.pdf:pdf},
issn = {0963-9314},
journal = {Software Quality Control},
number = {3},
pages = {209--231},
publisher = {Kluwer Academic Publishers},
title = {{Applying and combining three different aspect Mining Techniques}},
url = {http://dl.acm.org/citation.cfm?id=1147798.1147833},
volume = {14},
year = {2006}
}
@article{Ceccato2005,
abstract = {The fact that crosscutting concerns (aspects) cannot be well modularized in object oriented software is an impediment to program comprehension: the implementation of a concern is typically scattered over many locations and tangled with the implementation of other concerns, resulting in a system that is hard to explore and understand. Aspect mining aims to identify crosscutting concerns in a system, thereby improving the system’s comprehensibility and enabling migration of ex- isting (object-oriented) programs to aspect-oriented ones. In this paper, we compare three aspect mining techniques that were developed independently by different research teams: fan-in analysis, identifier analysis and dynamic analysis. We apply each technique to the same case (JHotDraw) and mu- tually compare the individual results of each technique based on the discovered aspects and on the level of detail and qual- ity of those aspects. Strengths, weaknesses and underlying assumptions of each technique are discussed, as well as their complementarity. We conclude with a discussion of possible ways to combine the techniques in order to achieve a better overall aspect-mining technique},
annote = {artigo incluido},
author = {Ceccato, M. and Marin, M. and Mens, K. and Moonen, L. and Tonella, P. and Tourwe, T.},
doi = {10.1109/WPC.2005.2},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Ceccato et al/13th International Workshop on Program Comprehension (IWPC'05)/Ceccato et al. - 2005 - A Qualitative Comparison of Three Aspect Mining Techniques.pdf:pdf},
isbn = {0-7695-2254-8},
journal = {13th International Workshop on Program Comprehension (IWPC'05)},
keywords = {aspect mining,aspect-oriented program-,concept analysis,crosscutting concerns,fan-in analysis,ming},
number = {1},
pages = {13--22},
publisher = {Ieee},
title = {{A Qualitative Comparison of Three Aspect Mining Techniques}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=1421011},
year = {2005}
}
@article{Ceccato2009,
abstract = {Legacy systems often contain several crosscutting concerns that could potentially benefit from an aspect-oriented programming implementation. In this paper, we focus on the problem of aspect identification in existing code. The main idea is that use-cases can be defined in order to separate the base logics from the crosscutting concerns to be aspectised. The relationship between the execution traces associated with the use-cases and the executed computational units (class methods) is analysed through concept analysis. The results obtained on some case studies are discussed in the paper.},
annote = {artigo incluido},
author = {Ceccato, M. and Tonella, P.},
doi = {10.1049/iet-sen.2008.0108},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Ceccato, Tonella/IET Software/Ceccato, Tonella - 2009 - Dynamic aspect mining.pdf:pdf},
issn = {17518806},
journal = {IET Software},
number = {4},
pages = {321},
title = {{Dynamic aspect mining}},
url = {http://link.aip.org/link/ISEOB7/v3/i4/p321/s1\&Agg=doi},
volume = {3},
year = {2009}
}
@inproceedings{Ceccato:2008:ASM:1545010.1545380,
abstract = {Aspect Oriented Programming (AOP) has been proposed as a new programming paradigm. The originality in AOP is the aspect, a single modularization unit for all those functionalities that were originally spread across several modules and tangled with each other (called crosscutting concerns). Using an aspect, a crosscutting concern can be factored out into a single, separate unit. This paper summarizes a PhD thesis that presents an approach to automatize the migration of existing Object Oriented systems towards AOP. Different techniques are proposed to cope with the migration and assessed on a large software basis.},
address = {Washington, DC, USA},
annote = {artigo incluido},
author = {Ceccato, Mariano},
booktitle = {Proceedings of the 2008 12th European Conference on Software Maintenance and Reengineering},
doi = {10.1109/CSMR.2008.4493331},
isbn = {978-1-4244-2157-2},
pages = {298--301},
publisher = {IEEE Computer Society},
title = {{Automatic Support for the Migration Towards Aspects}},
url = {http://dl.acm.org/citation.cfm?id=1545010.1545380},
year = {2008}
}
@inproceedings{Coady:2008:STP:1363686.1363750,
abstract = {Complex systems are intrinsically expensive to develop because several concerns must be addressed simultaneously. Once the development phase is over, these systems are often hard to reuse and evolve because their concerns are intertwined and making apparently small changes forces programmers to modify many parts. Moreover, legacy systems are difficult to evolve due the following problems: the lack of a well defined architecture, use of several programming languages and paradigms, etc.},
address = {New York, NY, USA},
annote = {Artigo nao incluido. Pois o mesmo nao passou nos criterios de exclus\~{o}es que dizem. The primary study is not about crosscutting concerns mining techniques - The primary study is a short paper (papers with less than four pages);},
author = {Coady, Yvonne and Santoro, Corrado and Tramontana, Emiliano and Welch, Ian},
booktitle = {Proceedings of the 2008 ACM symposium on Applied computing},
doi = {http://doi.acm.org/10.1145/1363686.1363750},
isbn = {978-1-59593-753-7},
pages = {251--252},
publisher = {ACM},
series = {SAC '08},
title = {{Special track on Programming for Separation of Concerns: editorial message}},
url = {http://doi.acm.org/10.1145/1363686.1363750},
year = {2008}
}
@inproceedings{Coelho:2006:AMA:1415472.1415487,
abstract = {Modern applications are typically complex, multithreaded, distributed, and often should provide real-time responses and small-footprint. Due to such characteristics, most often, it is hard to understand the behavior of such systems and consequently detect the root causes of performance or reliability problems. In order to collect information about system's runtime behavior - operations' performance, internal threads status - the system developer is required to instrument the target application (and sometimes also its execution platform). Such monitoring code which allows the developer to reason about the code execution is not localized in a single application module; it must be included in many modules. As a consequence, the monitoring concern tends to be scattered across multiple application/platform modules and tangled with other application concerns. The Application Monitor pattern supports the separate definition of monitoring-related functionalities concerns through the use of aspect-oriented programming. It decouples such concerns from the implementation of application-specific concerns, which in turn improves the system reusability and maintainability.},
address = {New York, NY, USA},
annote = {Artigo n\~{a}ao incluido pois o mesmo n\~{a}o passou no seguinte criterio de inclus\~{a}o: The primary study presents at least one crosscutting concern mining technique in font code;},
author = {Coelho, Roberta and Dantas, Ayla and Kulesza, Uir\'{a} and Cirne, Walfredo and von Staa, Arndt and Lucena, Carlos},
booktitle = {Proceedings of the 2006 conference on Pattern languages of programs},
doi = {http://doi.acm.org/10.1145/1415472.1415487},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Coelho et al/Proceedings of the 2006 conference on Pattern languages of programs/Coelho et al. - 2006 - The application monitor aspect pattern.pdf:pdf},
isbn = {978-1-60558-372-3},
keywords = {aspect-oriented programming,dynamic analysis,monitoring},
pages = {13:1----13:10},
publisher = {ACM},
series = {PLoP '06},
title = {{The application monitor aspect pattern}},
url = {http://doi.acm.org/10.1145/1415472.1415487},
year = {2006}
}
@inproceedings{4648364,
abstract = {Clustering is a division of data into groups of similar objects. Aspect
mining is a process that tries to identify crosscutting concerns
in existing software systems. The goal is to refactor the existing
systems to use aspect oriented programming in order to make them
easier to maintain and to evolve. The aim of this paper is to comparatively
analyze and evaluate the results obtained by different clustering
algorithms in aspect mining. The evaluation is performed on an open
source case study using four measures.},
annote = {Artigo incluido.},
author = {Cojocar, G S and Czibula, G},
booktitle = {Intelligent Computer Communication and Processing, 2008. ICCP 2008. 4th International Conference on},
doi = {10.1109/ICCP.2008.4648364},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Cojocar, Czibula/Intelligent Computer Communication and Processing, 2008. ICCP 2008. 4th International Conference on/Cojocar, Czibula - 2008 - On clustering based aspect mining.pdf:pdf},
keywords = {aspect mining;aspect oriented programming;data clu},
pages = {129--136},
title = {{On clustering based aspect mining}},
year = {2008}
}
@article{Cojocar2007,
abstract = {Many aspect mining techniques have already been proposed, even if aspect mining is a relatively new research domain. That is why the necessity to classify and to compare them has emerged. Not all the characteristics of the aspect mining techniques were considered as comparison criteria and very few generally applicable evaluation measures were proposed. This paper proposes a set of new criteria to compare the existing aspect mining techniques and a set of new evaluation measures to compare the results obtained by these techniques. The applicability of these measures for different aspect mining techniques is also discussed.},
annote = {Artigo nao incluido na revis\~{a}ao sistem\'{a}atica. Por\'{e}em o mesmo \'{e}e importante, pois define v\'{a}arios criterios de avalia\c{c}\~{a}o para serem aplicados nos algoritmos de minera\c{c}\~{a}ao de interesses transversais.},
author = {Cojocar, Grigoreta Sofia},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Cojocar/Elements/Cojocar - 2007 - On Some Criteria for Comparing Aspect Mining Techniques.pdf:pdf},
journal = {Elements},
keywords = {aspect mining,evaluation measures},
title = {{On Some Criteria for Comparing Aspect Mining Techniques}},
year = {2007}
}
@inproceedings{Costa:2009:RCM:1685994.1686240,
abstract = {An aspect-oriented software reengineering process allows transforming object-oriented legacy software into aspect-oriented software. One of the main steps of this evolutionary process is reverse engineering which recovers the current software model to obtain a more abstract view of software structure, architecture, and functionality. However, recovering aspect-oriented models from Java object-oriented code is not a straightforward task because it involves a lot of design decisions and the new abstractions provided by aspect-oriented programming. So, an approach and technological support are presented to recover object-oriented models stereotyped with crosscutting concern indications which are identified automatically from object-oriented code.},
address = {Washington, DC, USA},
annote = {Artigo n\~{a}ao incluido.},
author = {Costa, Heitor Augustus Xavier and Junior, Paulo Afonso Parreira and de Camargo, Valter Vieira and Penteado, Rosangela Aparecida Dellosso},
booktitle = {Proceedings of the 2009 16th Working Conference on Reverse Engineering},
doi = {http://dx.doi.org/10.1109/WCRE.2009.48},
isbn = {978-0-7695-3867-9},
keywords = {aspect orientation,reverse engineering,software maintenance},
pages = {311--312},
publisher = {IEEE Computer Society},
series = {WCRE '09},
title = {{Recovering Class Models Stereotyped with Crosscutting Concerns}},
url = {http://dx.doi.org/10.1109/WCRE.2009.48},
year = {2009}
}
@inproceedings{Dagenais2007254,
abstract = {As part of the evolution of software systems, effort is often invested to discover in what parts of the source code a feature (or other concern) is implemented. Unfortunately, knowledge about a concern's implementation can become invalid as the system evolves. We propose to mitigate this problem by automatically inferring structural patterns among the elements identified as relevant to a concern's implementation. We then document the inferred patterns as rules that can be checked as the source code evolves. Checking whether structural patterns hold across different versions of a system enables the automatic identification of new elements related to a documented concern. We implemented our technique for JAVA in an Eclipse plug-in called ISIS and applied it to a number of concerns. With a case study spanning 34 versions of the development history of an open-source system, we show how our approach supports the tracking of a concern's implementation through modifications such as extensions and refactorings. Copyright 2007 ACM.},
address = {Atlanta, GA},
annote = {Artigo nao incluido pois o mesmo nao apresenta nenhuma tecnica de mineracao de interesse transversal.

      },
author = {{Dagenais B.a Breu}, S.b Warr F.W.a Robillard M.P.a and Dagenais, Barth\'{e}l\'{e}my and Breu, Silvia and Warr, Fr\'{e}d\'{e}ric Weigand and Robillard, Martin P.},
booktitle = {ASE'07 - 2007 ACM/IEEE International Conference on Automated Software Engineering},
doi = {10.1145/1321631.1321669},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Dagenais B.a Breu et al/ASE'07 - 2007 ACMIEEE International Conference on Automated Software Engineering/Dagenais B.a Breu et al. - 2007 - Inferring structural patterns for concern traceability in evolving software.pdf:pdf},
isbn = {9781595938824},
keywords = {Automatic identification,Automation,Biology,Computer software,Development history,Electronic data interchange,Ope,concern tracking,feature,intension template,location,software evolution},
pages = {254--263},
publisher = {ACM Press},
title = {{Inferring structural patterns for concern traceability in evolving software}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-53849091894\&partnerID=40\&md5=8147bef4ca02f3dfd63c0a472859ee63 http://portal.acm.org/citation.cfm?doid=1321631.1321669},
year = {2007}
}
@inproceedings{4556117,
abstract = {The concern location problem is to identify the source code within a program related to the features, requirements, or other concerns of the program. This problem is central to program development and maintenance. We present a new technique called prune dependency analysis that can be combined with existing techniques to dramatically improve the accuracy of concern location. We developed CERBERUS, a potent hybrid technique for concern location that combines information retrieval, execution tracing, and prune dependency analysis. We used CERBERUS to trace the 360 requirements of RHINO, a 32,134 line Java program that implements the ECMAScript international standard. In our experiment, prune dependency analysis boosted the recall of information retrieval by 155\% and execution tracing by 104\%. Moreover, we show that our combined technique outperformed the other techniques when run individually or in pairs.},
annote = {Artigo incluido.},
author = {Eaddy, M and Aho, A V and Antoniol, G and Gueheneuc, Y.-G.},
booktitle = {Program Comprehension, 2008. ICPC 2008. The 16th IEEE International Conference on},
doi = {10.1109/ICPC.2008.39},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Eaddy et al/Program Comprehension, 2008. ICPC 2008. The 16th IEEE International Conference on/Eaddy et al. - 2008 - CERBERUS Tracing Requirements to Source Code Using Information Retrieval, Dynamic Analysis, and Program Analysis.pdf:pdf},
issn = {1063-6897},
keywords = {CERBERUS,ECMAScript international standard,Java pr},
pages = {53--62},
title = {{CERBERUS: Tracing Requirements to Source Code Using Information Retrieval, Dynamic Analysis, and Program Analysis}},
url = {http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=04556117},
year = {2008}
}
@inproceedings{Eaddy:2007:IAQ:1270229.1270244,
abstract = {Crosscutting concerns degrade software quality. Before we can modularize the crosscutting concerns in our programs to increase software quality, we must first be able to find them. Unfortunately, accurately locating the code related to a concern is difficult, and without proper metrics, determining how much the concern is crosscutting is impossible. We propose a systematic methodology for identifying which code is related to which concern, and a suite of metrics for quantifying the amount of crosscutting code. Our concern identification and assignment guidelines resolve some of the ambiguity issues encountered by other researchers. We applied this approach to systematically identify all the requirement concerns in a 13,531 line program. We found that 95\% of the concerns were crosscutting - indicating a significant potential for improving modularity - and that our metrics were better able to determine which concerns would benefit the most from reengineering.},
address = {Washington, DC, USA},
annote = {http://www.comp.lancs.ac.uk/computing/aop/papers/fse\_2006.pdf

        

        
Artigo incluido.},
author = {Eaddy, Marc and Aho, Alfred and Murphy, Gail C},
booktitle = {Proceedings of the First International Workshop on Assessment of Contemporary Modularization Techniques},
doi = {http://dx.doi.org/10.1109/ACOM.2007.4},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Eaddy, Aho, Murphy/Proceedings of the First International Workshop on Assessment of Contemporary Modularization Techniques/Eaddy, Aho, Murphy - 2007 - Identifying, Assigning, and Quantifying Crosscutting Concerns.pdf:pdf},
isbn = {0-7695-2967-4},
pages = {2----},
publisher = {IEEE Computer Society},
series = {ACoM '07},
title = {{Identifying, Assigning, and Quantifying Crosscutting Concerns}},
url = {http://dx.doi.org/10.1109/ACOM.2007.4},
year = {2007}
}
@incollection{springerlink:10.1007/978-3-642-11928-6_19,
abstract = {Legacy OO applications typically implement a set of functional features which, in the absence of aspect-oriented techniques to separately develop and maintain them, end up embodied in the same class hierarchies. We identified three types of design techniques used to implement that embodiment: a) multiple inheritance– or simulations thereof, b) aggregation/delegation, and c) what we referred to as ad-hoc implementation . We are interested in identifying and isolating software artifacts that implement distinct functional features. Here, we explore the use of concept analysis to detect ad-hoc implementations of functional features. We present the principles underlying our overall approach, a formalization of the problem in terms of concept analysis, a method for identifying functional features based on the construction and exploration of the concept latice, and the results of an experimental validation study.},
annote = {Artigo incluido},
author = {{El Kharraz}, Amal and Valtchev, Petko and Mili, Hafedh},
booktitle = {Formal Concept Analysis},
editor = {Kwuida, L\'{e}onard and Sertkaya, Baris},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/El Kharraz, Valtchev, Mili/Formal Concept Analysis/El Kharraz, Valtchev, Mili - 2010 - Concept Analysis as a Framework for Mining Functional Features from Legacy Code.pdf:pdf},
isbn = {978-3-642-11927-9},
pages = {267--282},
publisher = {Springer Berlin / Heidelberg},
series = {Lecture Notes in Computer Science},
title = {{Concept Analysis as a Framework for Mining Functional Features from Legacy Code}},
url = {http://dx.doi.org/10.1007/978-3-642-11928-6\_19},
volume = {5986},
year = {2010}
}
@inproceedings{5365742,
abstract = {Legacy OO applications typically implement a number of functional
features. In the absence of aspect-oriented development techniques
to separately develop and maintain these features, they end up embodied
in the same class hierarchies. That embodiement depends on the design
technique used to implement them. We identified three such design
techniques: a) multiple inheritance- or simulations thereof, b) delegation,
and c) what we referred to as adhoc implementation. We are interested
in developing techniques for identifying and isolating code fragments
that implement distinct functional features. Here, we explore the
use of concept analysis to detect ad-hoc implementations of features.
We present the principles underlying our overall approach, a concrete
method for identifying functional features in legacy code, and the
results of preliminary experimentation.},
annote = {Artigo Incluido},
author = {Elkharraz, A and Valtchev, P and Mili, H},
booktitle = {Tools with Artificial Intelligence, 2009. ICTAI '09. 21st International Conference on},
doi = {10.1109/ICTAI.2009.110},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Elkharraz, Valtchev, Mili/Tools with Artificial Intelligence, 2009. ICTAI '09. 21st International Conference on/Elkharraz, Valtchev, Mili - 2009 - Using Concepts Analysis for Mining Functional Features from Legacy Code.pdf:pdf},
issn = {1082-3409},
keywords = {adhoc implementation;concepts analysis;functional },
pages = {625--629},
title = {{Using Concepts Analysis for Mining Functional Features from Legacy Code}},
year = {2009}
}
@inproceedings{Elkharraz:2008:MFA:1474548.1474691,
abstract = {Aspect-oriented software development builds upon object-oriented (OO) development by offering additional abstraction boundaries that help us separate different types of requirements into so-called aspects. Given a legacy OO application, it pays to identify existing aspects to help understand the structure of the application and potentially to extract those aspects into separate software modules that can be maintained and reused individually. We are interested in the extraction and repackaging of functional aspects. We first characterize what we mean by functional aspect, and then explore the properties that such aspects are likely to exhibit in a legacy application that integrate such aspects. Next, we present algorithms for extracting such aspects, and the preliminary results we obtained. We conclude by discussing directions for future research.},
address = {Washington, DC, USA},
annote = {Artigo Incluido},
author = {Elkharraz, Amal and Mili, Hafedh and Valtchev, Petko},
booktitle = {Proceedings of the 2008 20th IEEE International Conference on Tools with Artificial Intelligence - Volume 02},
doi = {10.1109/ICTAI.2008.149},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Elkharraz, Mili, Valtchev/Proceedings of the 2008 20th IEEE International Conference on Tools with Artificial Intelligence - Volume 02/Elkharraz, Mili, Valtchev - 2008 - Mining Functional Aspects from Legacy Code.pdf:pdf},
isbn = {978-0-7695-3440-4},
keywords = {Aspect-oriented software development,aspect mining,formal concept analysis,functional aspects,refactoring},
pages = {403--412},
publisher = {IEEE Computer Society},
title = {{Mining Functional Aspects from Legacy Code}},
url = {http://dl.acm.org/citation.cfm?id=1474548.1474691},
year = {2008}
}
@inproceedings{Ettinger:2004:USE:976270.976283,
abstract = {Separation of concerns in existing code can be achieved by specific refactoring techniques. Modern refactoring tools support a number of well-known refactoring transformations, including method extraction. In this paper, we examine how method extraction can be improved through program slicing. Furthermore, we show how a generalization of such slice extraction can be applied to untangle existing code by extracting aspects.},
address = {New York, NY, USA},
annote = {Artigo incluido.},
author = {Ettinger, Ran and Verbaere, Mathieu},
booktitle = {Proceedings of the 3rd international conference on Aspect-oriented software development},
doi = {http://doi.acm.org/10.1145/976270.976283},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Ettinger, Verbaere/Proceedings of the 3rd international conference on Aspect-oriented software development/Ettinger, Verbaere - 2004 - Untangling a slice extraction refactoring.pdf:pdf},
isbn = {1-58113-842-3},
pages = {93--101},
publisher = {ACM},
series = {AOSD '04},
title = {{Untangling: a slice extraction refactoring}},
url = {http://doi.acm.org/10.1145/976270.976283},
year = {2004}
}
@inproceedings{5336120,
abstract = {Empirical studies have stressed that aspect-oriented decompositions
can cause non-obvious flaws in the modularity of certain design concerns.
Without proper design evaluation mechanisms, the identification of
these flaws can become counter-productive and impractical. Nowadays,
modularity assessment is mostly supported by metric-based heuristics
rooted at conventional attributes, such as module cohesion and coupling.
However, such conventional module-driven assessment cannot be tailored
to the design concerns. This paper proposes and systematically evaluates
a representative suite of concern-sensitive heuristic rules. The
accuracy of the heuristics is assessed through their application
to six systems. The analysis was based on the heuristics support
for: (i) addressing the shortcomings of conventional metrics-based
assessments, (ii) reducing the manifestation of false positives and
false negatives, and (iii) finding the presence of design flaws relative
to both classes and aspects.},
annote = {Artigo n\~{a}ao incluido. 
        
        
Pois o mesmo n\~{a}ao apresenta um t\'{e}ecnica de minera\c{c}\~{a}ao de interesse transversal. O mesmo avalia sistematicamente um conjunto representativo de interesse sens\'{\i}vel regras heur\'{\i}sticas.},
author = {Figueiredo, E and Sant'Anna, C and Garcia, A and Lucena, C},
booktitle = {Software Engineering, 2009. SBES '09. XXIII Brazilian Symposium on},
doi = {10.1109/SBES.2009.14},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Figueiredo et al/Software Engineering, 2009. SBES '09. XXIII Brazilian Symposium on/Figueiredo et al. - 2009 - Applying and Evaluating Concern-Sensitive Design Heuristics.pdf:pdf},
keywords = {aspect-oriented decompositions;concern-sensitive d},
pages = {83--93},
title = {{Applying and Evaluating Concern-Sensitive Design Heuristics}},
year = {2009}
}
@article{Garcia2002,
abstract = {This paper presents a reengineering approach to help in migrating pure object-oriented codes to a mixture of objects and aspects. The approach focuses on aspect-mining to identify potential crosscutting concerns to be modeled and implemented as aspects, and on refactoring techniques to reorganize the code according to aspect- oriented paradigm by using code transformations it is possible to recover the aspect-oriented design using a transformational system. With the recovered design it is possible to add or modify the system requirements in a CASE tool, and to generate the codes in an executable language, in this case AspectJ.},
annote = {Artigo incluido.},
author = {Garcia, Vinicius Cardoso and Almeida, Eduardo Santana De and Alvaro, Alexandre and Romero, Silvio and Meira, De Lemos},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Garcia et al/Computer/Garcia et al. - 2005 - Towards an approach for aspect-oriented software reengineering.pdf:pdf},
journal = {Computer},
title = {{Towards an approach for aspect-oriented software reengineering}},
year = {2005}
}
@inproceedings{4076634,
abstract = {Recently, Continua Health Alliance has brought together a powerhouse
team, including Cisco, IBM, Motorola and others, for personal telehealth
products and services. This team can provide commodity interoperable
healthcare devices and services by introducing new connectivity standards
for health management tools. But the costs of integrating and configuring
disparate system services have proven to be prohibitive in this domain-
healthcare processes require extreme agility to assimilate information
across traditional boundaries. As a result, these tools must work
effectively with dynamic business processes that often elude cost-effective
integration themselves. This creates a requirement for software to
be fluidly configurable and interoperable in order to best support
personalized care with truly integrated solutions. We believe that,
without a new technology for the seamless integration of features
within healthcare devices, costs associated with attempts to fuse
IT with dynamic business processes can continue to be an obstacle
in modern patient care. Aspect-oriented software development (AOSD)
is focused on novel notions of modularity that crosscut traditional
abstraction boundaries. AOSD techniques and tools, applied at all
stages of the software lifecycle, are changing the way software is
developed in a wide spectrum of application domains, ranging from
embedded systems to enterprise IT. This paper outlines the ways in
which aspects could aid the integration and evolution of software
used to support modern healthcare practices across this spectrum,
with examples at each stage. We believe the key principle of AOSD
- the modularization of crosscutting concerns - to be an integral
part of the solution to the challenges currently facing modern health
service infrastructures},
annote = {Artigo n\~{a}o incluido. o artigo n\~{a}o apresenta nenhuma t\'{e}ecnica de minera\c{c}\~{a}ao de aspecto.},
author = {Gibbs, Celina and Lohmann, Daniel and Liu, Chunjian Robin and Coady, Yvonne},
booktitle = {System Sciences, 2007. HICSS 2007. 40th Annual Hawaii International Conference on},
doi = {10.1109/HICSS.2007.390},
issn = {1530-1605},
keywords = {aspect-oriented software development;health manage},
pages = {132},
title = {{Modular Integration Through Aspects: Making Cents of Legacy Systems}},
year = {2007}
}
@article{GRIGORETASOFIACOJOCAR2009,
abstract = {Aspect mining is a research direction that tries to identify crosscutting concerns in already developed software systems, without using aspect oriented programming. The goal is to identify them and then to refactor them to aspects, to achieve a system that can be easily understood, maintained and modi¯ed. In this paper we aim at comparatively analyzing four clustering algorithms in aspect mining. The comparison is made using a set of quality measures previously introduced in aspect mining literature.},
annote = {Artigo nao incluido. Pois o mesmo nao apresenta nenhuma nova tecnica de mineracao somente apresenta comparac\~{o}oes.},
author = {{GRIGORETA SOFIA COJOCAR}, GABRIELA CZIBULA AND ISTVAN GERGELY and CZIBULA},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/GRIGORETA SOFIA COJOCAR, CZIBULA/Unknown/GRIGORETA SOFIA COJOCAR, CZIBULA - 2009 - A COMPARATIVE ANALYSIS OF CLUSTERING ALGORITHMS IN ASPECT MINING.pdf:pdf},
title = {{A COMPARATIVE ANALYSIS OF CLUSTERING ALGORITHMS IN ASPECT MINING}},
url = {http://www.cs.ubbcluj.ro/~studia-i/2009-1/07-CojocarCzibula.pdf},
year = {2009}
}
@phdthesis{Hannemann:2006:RRC:1168738,
abstract = {Improving the structure of code can help developers work with a software system more efficiently and more consistently. Aspect-oriented programming (AOP) offers additional ways to structure software by providing explicit means to modularize crosscutting concerns (CCCs) in modularity units called aspects. With the advent of AOP, a new kind of structural improvement of software needs to be considered: the refactoring of non-modularized CCCs into aspects. Refactorings have shown to be helpful for object-oriented software development and maintenance, but their application to aspect-oriented software is not yet well understood. In particular, since refactorings of non-modularized crosscutting concerns involve multiple program elements with potentially complicated relationships, they are considerably more complex than traditional refactorings; the lack of tool support to help plan, reason about and execute CCC refactorings impedes the improvement of code modularity. The thesis of this research is that the refactoring of crosscutting concerns can be supported by a role-based concern model. In this model, crosscutting concerns are described in terms of abstract roles, and instructions for refactoring the concerns are written in terms of those roles. To apply a refactoring, a developer maps a subset of the roles to concrete program elements; a tool can then help complete the mapping of roles to the existing program. Refactoring instructions are then applied to manipulate and modularize the concrete elements corresponding to the crosscutting concern. The abstract nature of such a role-based concern model allows the definition of a refactoring description separately from concrete systems it may be applied to, and allows using a single description to refactor multiple instances of the same concern. To aid developers in restructuring the implementation of crosscutting concerns using aspect-oriented programming, we introduce in this dissertation a refactoring approach and proof-of-concept tool founded on our role-based concern model. We show that abstract descriptions of crosscutting concerns can be applied to previously existing software and we describe the potential for expressing and executing a variety of new CCC refactorings.},
address = {Vancouver, BC, Canada, Canada},
annote = {artigo n\~{a}ao incluido. Pois o mesmo descreve tecnicas de refatoracao para sistemas j\'{a}a modularizados no paradigma orientado a aspectos.},
author = {Hannemann, Jan},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Hannemann/Unknown/Hannemann - 2006 - Role-based refactoring of crosscutting concerns.pdf:pdf},
isbn = {0-494-13001-6},
publisher = {University of British Columbia},
title = {{Role-based refactoring of crosscutting concerns}},
year = {2006}
}
@article{Harman2005801,
abstract = {In systems developed without aspect-oriented programming, code implementing a crosscutting concern may be spread over many different parts of a system. Identifying such code automatically could be of great help during maintenance of the system. First of all, it allows a developer to more easily find the places in the code that must be changed when the concern changes and, thus, makes such changes less time consuming and less prone to errors. Second, it allows the code to be refactored to an aspect-oriented solution, thereby improving its modularity. In this paper, we evaluate the suitability of clone detection as a technique for the identification of crosscutting concerns. To that end, we manually identify five specific crosscutting concerns in an industrial C system and analyze to what extent clone detection is capable of finding them. We consider our results as a stepping stone toward an automated "aspect miner” based on clone detection.},
annote = {nao incluido, pois o mesmo nao \'{e}e um paper.},
author = {{Harman M.a Korel}, B.b Linos P.K.c},
doi = {10.1109/TSE.2005.113},
issn = {00985589},
journal = {IEEE Transactions on Software Engineering},
number = {10},
pages = {801--803},
title = {{Guest editorial: Special issue on software maintenance and evolution}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-30344440108\&partnerID=40\&md5=2761366fb8a24ffcebcc9dba6276892b},
volume = {31},
year = {2005}
}
@inproceedings{Huang2010,
abstract = {Abstract—Aspect mining is a technique that decouples the crosscutting concerns from existing software systems. The goal of aspect mining is to refactor the existing software systems with Aspect Oriented Programming technology. Inspired by the link analysis of information retrieval technology, this paper describes a two-state model to approximate how crosscutting concerns can be discovered in the concern graphs extracted from programs. Our mining algorithm generates ”scatter” and ”centralization” of each program element for the final ranking. The convergency of the algorithm proves fast. The Ranking technique, considering both ”scatter” and ”centralization”, produces a final ranking for identifying crosscutting concerns. Our aspect mining approach is evaluated on numerous Java programs that are of the typical selections for aspect mining. Compared with existing aspect min- ing approaches, our mining approach captures more information that helps domain experts refactor software systems and prove effective in identifying crosscutting concerns.},
annote = {Artigo incluido.},
author = {Huang, Jin and Lu, Yansheng and Yang, Jing},
booktitle = {2010 Fifth International Conference on Frontier of Computer Science and Technology},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Huang, Lu, Yang/2010 Fifth International Conference on Frontier of Computer Science and Technology/Huang, Lu, Yang - 2010 - Aspect Mining Using Link Analysis.pdf:pdf},
pages = {312--317},
publisher = {IEEE},
title = {{Aspect Mining Using Link Analysis}},
url = {http://www.computer.org/portal/web/csdl/doi/10.1109/FCST.2010.20},
year = {2010}
}
@inproceedings{Ishio:2008:MCP:1447565.1448040,
abstract = {A coding pattern is a frequent sequence of method calls and control statements to implement a particular behavior. Coding patterns include copy-and-pasted code, crosscutting concerns and implementation idioms. Duplicated code fragments and crosscutting concerns that spread across modules are problematic in software maintenance. In this paper, we propose a sequential pattern mining approach to capture coding patterns in Java programs. We have defined a set of rules to translate Java source code into a sequence database for pattern mining, and applied PrefixSpan algorithm to the sequence database. As a case study, we have applied our tool to six open-source programsand manually investigated the resultant patterns. We report coding patterns that are candidates of aspects and several logging patterns that are well-known crosscutting concerns but hard to modularize.},
address = {Washington, DC, USA},
annote = {artigo incluido.},
author = {Ishio, Takashi and Date, Hironori and Miyake, Tatsuya and Inoue, Katsuro},
booktitle = {Proceedings of the 2008 15th Working Conference on Reverse Engineering},
doi = {10.1109/WCRE.2008.28},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Ishio et al/Proceedings of the 2008 15th Working Conference on Reverse Engineering/Ishio et al. - 2008 - Mining Coding Patterns to Detect Crosscutting Concerns in Java Programs.pdf:pdf},
isbn = {978-0-7695-3429-9},
keywords = {Aspect Mining,Java,Sequential Pattern Mining,Software Maintenance,Static Analysis},
pages = {123--132},
publisher = {IEEE Computer Society},
title = {{Mining Coding Patterns to Detect Crosscutting Concerns in Java Programs}},
url = {http://dl.acm.org/citation.cfm?id=1447565.1448040},
year = {2008}
}
@inproceedings{Ishio:2008:MAC:1404953.1404956,
abstract = {A crosscutting concern is often implemented based on a coding pattern, or a particular sequence of method calls and control state- ments. We have applied a sequential pattern mining algorithm to capture coding patterns in Java programs. We have manually in- vestigated the resultant patterns that involve both crosscutting con- cerns and implementation idioms. This paper discusses the detail of our pattern mining algorithm and reports detected crosscutting concerns.},
address = {New York, NY, USA},
annote = {Artigo incluido.},
author = {Ishio, Takashi and Date, Hironori and Miyake, Tatsuya and Inoue, Katsuro},
booktitle = {Proceedings of the 2008 AOSD workshop on Linking aspect technology and evolution},
doi = {http://doi.acm.org/10.1145/1404953.1404956},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Ishio et al/Proceedings of the 2008 AOSD workshop on Linking aspect technology and evolution/Ishio et al. - 2008 - Mining application-specific coding patterns for software maintenance.pdf:pdf},
isbn = {978-1-60558-147-7},
pages = {3:1----3:5},
publisher = {ACM},
series = {LATE '08},
title = {{Mining application-specific coding patterns for software maintenance}},
url = {http://doi.acm.org/10.1145/1404953.1404956},
year = {2008}
}
@inproceedings{Ishio:2003:PST:942803.943742,
abstract = {One of the issues in software evolution is debugging. Debugging large and complex software systems evolved requires a lot of effort since it is very difficult to localize and identify faults. Therefore, reducing the effort of debugging process is an important step towards efficient software evolution. Program slicing, especially dynamic slicing, has been proposed to ef.ciently localize faults in a procedural program and an object-oriented program. Although several tools have been developed for Java programs, these are difficult to maintain because of the frequent revision of Java languages. Aspect-Oriented Programming (AOP) is a newtechnology for the separation of concerns in program development. Using AOP, modularizing crosscutting aspects of a system is possible. One useful application of AOP is for modularizing the collecting program's dynamic information for program analysis. Since the collection of dynamic information affects the over-all target program, this functionality is a typical crosscutting concern. In this paper, we apply AOP to develop a program debugging tool using program slicing. First, we examine the application of AOP for collecting dynamic information from program execution and for calculating program slices. Next, we develop a program slicing system using AspectJ. Finally, we describe the benefits, usability, and cost effectiveness of a module of dynamic analysis based on AOP.},
address = {Washington, DC, USA},
annote = {Artigo nao incluido.},
author = {Ishio, Takashi and Kusumoto, Shinji and Inoue, Katsuro},
booktitle = {Proceedings of the 6th International Workshop on Principles of Software Evolution},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Ishio, Kusumoto, Inoue/Proceedings of the 6th International Workshop on Principles of Software Evolution/Ishio, Kusumoto, Inoue - 2003 - Program Slicing Tool for Effective Software Evolution Using Aspect-Oriented Technique.pdf:pdf},
isbn = {0-7695-1903-2},
pages = {3----},
publisher = {IEEE Computer Society},
title = {{Program Slicing Tool for Effective Software Evolution Using Aspect-Oriented Technique}},
url = {http://dl.acm.org/citation.cfm?id=942803.943742},
year = {2003}
}
@article{Janzen2003,
abstract = {A development task related to a crosscutting concern is challenging because a developer can easily get lost when exploring scattered elements of code and the complex tangle of relationships between them. In this paper we present a source browsing tool that improves the developer's ability to work with crosscutting concerns by providing better support for exploring code. Our tool helps the developer to remain oriented while exploring and navigating across a code base. The cognitive burden placed on a developer is reduced by avoiding disorienting view switches and by providing an explicit representation of the exploration process in terms of exploration paths. While our tool is generally useful, good navigation support is particularly important when exploring crosscutting concerns.},
address = {New York, New York, USA},
annote = {artigo nao incluido. Pois o mesmo nao apresenta nenhuma tecnica de minera\c{c}\~{a}o de interesse transversal.},
author = {Janzen, Doug and {De Volder}, Kris},
doi = {10.1145/643603.643622},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Janzen, De Volder/Proceedings of the 2nd international conference on Aspect-oriented software development - AOSD '03/Janzen, De Volder - 2003 - Navigating and querying code without getting lost.pdf:pdf},
isbn = {1581136609},
journal = {Proceedings of the 2nd international conference on Aspect-oriented software development - AOSD '03},
pages = {178--187},
publisher = {ACM Press},
title = {{Navigating and querying code without getting lost}},
url = {http://portal.acm.org/citation.cfm?doid=643603.643622},
year = {2003}
}
@article{Kellens,
abstract = {This paper offers a first, in-breadth survey and comparison of current aspect mining tools and techniques. It focuses mainly on automated techniques that mine a program's static or dynamic structure for candidate aspects. We present an initial comparative framework for distinguishing aspect mining techniques, and assess known techniques against this framework. The results of this assessment may serve as a roadmap to potential users of aspect mining techniques, to help them in selecting an appropriate technique. It also helps aspect mining researchers to identify remaining open research questions, possible avenues for future research, and interesting combinations of existing techniques.},
annote = {Artigo nao incluido, pois o memso n\~{a}ao apresenta nenhuma tecnica de mineracao sistem\'{a}atica criado pelo autores. O objetivo do artigo e apresentar um survey das tecnicas existentes. },
author = {Kellens, Andy and Mens, Kim and Tonella, Paolo},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Kellens, Mens, Tonella/Transactions on Aspect-Oriented Software Development IV/Kellens, Mens, Tonella - 2007 - A Survey of Automated Code-Level Aspect Mining Techniques.pdf:pdf},
journal = {Technology},
title = {{A Survey of Automated Code-Level Aspect Mining Techniques}},
year = {2007}
}
@inproceedings{Kim:2009:DRS:1555001.1555046,
abstract = {Software engineers often inspect program differences when reviewing others' code changes, when writing check-in comments, or when determining why a program behaves differently from expected behavior after modification. Program differencing tools that support these tasks are limited in their ability to group related code changes or to detect potential inconsistencies in those changes. To overcome these limitations and to complement existing approaches, we built Logical Structural Diff (LSdiff), a tool that infers systematic structural differences as logic rules. LSdiff notes anomalies from systematic changes as exceptions to the logic rules. We conducted a focus group study with professional software engineers in a large E-commerce company; we also compared LSdiff's results with textual differences and with structural differences without rules. Our evaluation suggests that LSdiff complements existing differencing tools by grouping code changes that form systematic change patterns regardless of their distribution throughout the code, and its ability to discover anomalies shows promise in detecting inconsistent changes.},
address = {Washington, DC, USA},
annote = {Artigo n\~{a}ao incluido, pois o mesmo n\~{a}ao apresenta nenhuma tecnica de mineracao de aspecto.},
author = {Kim, Miryung and Notkin, David},
booktitle = {Proceedings of the 31st International Conference on Software Engineering},
doi = {http://dx.doi.org/10.1109/ICSE.2009.5070531},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Kim, Notkin/Proceedings of the 31st International Conference on Software Engineering/Kim, Notkin - 2009 - Discovering and representing systematic code changes.pdf:pdf},
isbn = {978-1-4244-3453-4},
pages = {309--319},
publisher = {IEEE Computer Society},
series = {ICSE '09},
title = {{Discovering and representing systematic code changes}},
url = {http://dx.doi.org/10.1109/ICSE.2009.5070531},
year = {2009}
}
@inproceedings{Kniesel:2007:CLI:1275672.1275678,
abstract = {In this paper we evaluate logic code analysis and transformation frameworks for their suitability as basic infrastructures for fast detection and extraction of (crosscutting) concerns. Using design patterns as example concerns, we identify desirable properties that an infrastructure should fulfill. We then report our initial results of evaluating candidate systems with respect to these properties. We show how high precision design pattern detectors can be easily formulated as predicates that are evaluated in mere seconds even on the sources of large software systems, such as the Eclipse IDE. Although details still remain to be analyzed further, our current results suggest that the pair JTransformer \& CTC is a good candidate for a general infrastructure, combining very good querying performance, scalability and short turn-around times with a seamless integration of querying and transformation capabilities.},
address = {New York, NY, USA},
annote = {Artigo n\~{a}ao apresenta nenhuma t\'{e}ecnica de minera\c{c}\~{a}ao de interesse transversal. No entanto, apresenta uma abordagem na qual tem como objetivo refatorar design pattern to aspect.. },
author = {Kniesel, G\"{u}nter and Hannemann, Jan and Rho, Tobias},
booktitle = {Proceedings of the 3rd workshop on Linking aspect technology and evolution},
doi = {http://doi.acm.org/10.1145/1275672.1275678},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Kniesel, Hannemann, Rho/Proceedings of the 3rd workshop on Linking aspect technology and evolution/Kniesel, Hannemann, Rho - 2007 - A comparison of logic-based infrastructures for concern detection and extraction.pdf:pdf},
isbn = {978-1-59593-655-4},
keywords = {CTC,JQuery,JTransformer,code-quest,concern mining,design pattern detection,logic code analysis and transformation},
publisher = {ACM},
series = {LATE '07},
title = {{A comparison of logic-based infrastructures for concern detection and extraction}},
url = {http://doi.acm.org/10.1145/1275672.1275678},
year = {2007}
}
@inproceedings{1167758,
abstract = {Many modification tasks on an existing software system result in changes to code that crosscuts the system's structure. Making these changes is difficult because a developer must understand large parts of the system, and must reason about how the modification will interact with the existing behaviour. Typically, developers make these kinds of changes using an ad-hoc approach with tools that help in gaining some understanding of the existing system, but that do not provide any specific support for reasoning about, implementing, or analyzing just that part of the system related to the modification. We present the behavioural concern modelling (BCM) approach and tool that provide direct support for a systematic approach to modification tasks. This approach enables a developer to create a partial, abstract, grounded behavioural model of a concern(s). By grounded, we mean that the relationship between the model and the code is explicit: A developer describes which code contributes to which parts of the model. The examples we describe use a finite state machine as a model. We show how the approach can help a developer capture a concern, reason about design options, and implement modifications.},
annote = {Artigo nao incluido, pois o mesmo nao apresenta nenhuma propriamente dita de mineracao de interesses transversais.},
author = {Lai, A.Y.-H. and Murphy, G C},
booktitle = {Software Maintenance, 2002. Proceedings. International Conference on},
doi = {10.1109/ICSM.2002.1167758},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Lai, Murphy/Software Maintenance, 2002. Proceedings. International Conference on/Lai, Murphy - 2002 - Behavioural concern modelling for software change tasks.pdf:pdf},
issn = {1063-6773},
keywords = {ad-hoc approach,behavioural concern modelling,fi},
pages = {112--121},
title = {{Behavioural concern modelling for software change tasks}},
year = {2002}
}
@article{MagielBruntinkArievanDeursenMajaD'Hondt2007,
annote = {Artigo n\~{a}ao incluido.},
author = {{Magiel Bruntink, Arie van Deursen, Maja D'Hondt}, and Tom Tourw},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Magiel Bruntink, Arie van Deursen, Maja D'Hondt/Technology/Magiel Bruntink, Arie van Deursen, Maja D'Hondt - 2007 - Simple Crosscutting Concerns Are Not So Simple.pdf:pdf},
isbn = {1595936157},
journal = {Technology},
keywords = {are returned by functions,aspect-oriented programming,cross-,cutting concerns,formal concept analysis,idioms,implement exception handling,is used in languages,it advocates the use,of error codes that,such as c to,variability},
pages = {199--211},
title = {{Simple Crosscutting Concerns Are Not So Simple}},
year = {2007}
}
@article{Maisikeli2010,
abstract = {A major impediment to program comprehension, maintenance and evolvability is the existence of crosscutting concerns scattered across different modules tangled with implementations of other concerns. Presence of crosscutting concerns in software systems can lead to bloated and inefficient software systems that are difficult to evolve, hard to analyze, difficult to reuse and costly to maintain. This paper shows that clustering based on easily extractable software features derived through method calls, parameter sharing and method interactions represented as dynamic metrics can be used to determine code scattering and or tangling, thereby providing a steppingstone towards identifying crosscutting concerns leading to mining of possible aspect candidates. A three-step approach is used in the Aspect Mining methodology introduced in this paper. In the first step, two legacy programs were dynamically traced, and data representing interaction between code fragments were collected. In the second step, metrics were formulated from the collected data and submitted as input to Self Organizing Maps for clustering. In the third step, the obtained clusters were mapped against the test programs in order to identify code scattering and tangling symptoms, leading to identification of aspect candidates. Finally viable validation methodologies were applied to assess performance, and establish the validity of the methodologies used. Results obtained in this paper are found to have matched or exceeded results obtained in other existing Aspect Mining methods},
annote = {Artigo incluido.},
author = {Maisikeli, Sayyed G},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Maisikeli/Information Sciences/Maisikeli - 2010 - Aspect Mining Using Self-Organizing Maps With Method Level Dynamic Software Metrics as Input Vectors.pdf:pdf},
isbn = {9781424486663},
journal = {Information Sciences},
keywords = {- aspect mining,and information sciences,crosscutting concerns,frank j,graduate school of computer,maps,mitropoulos,self organizing,software metrics,software visualization},
pages = {212--217},
title = {{Aspect Mining Using Self-Organizing Maps With Method Level Dynamic Software Metrics as Input Vectors}},
year = {2010}
}
@inproceedings{Majumdar:2009:MPP:1747491.1747494,
abstract = {‘Separation of Concerns’ has long been a key issue in the field of Software Engineering. While developing a large complex and scalable Software, it can be observed that certain concerns have a tendency to get interleaved with the Core-Functionalities in such a way that they become inseparable. As a result of which the coder, who is supposed to be responsible only with the Core-Functionalities, is bound to take extra burden or botheration regarding the proper and accurate handling of these scattered and crosscutting concerns called Aspects. In our work we propose to devise a complete process of migrating a procedural form source-code to an aspect oriented program. We propose to devise a methodology to separate the scattered concerns from source-code through Code-Mining cascaded with a Traceability-Framework also to be framed by us. Thereafter we propose to devise a Design-Level Aspect Oriented Model for refactoring these separated code fragments in the Aspect Oriented Paradigm. Lastly, we propose to verify and validate the complete migration process.},
address = {Washington, DC, USA},
annote = {Artigo nao incluido.

        
O artigo apresenta uma t\'{e}cnica de mineracao de interesse transversal a qual tenta modularizar sistemas legados que foram desenvolvidos utilizando o paradigma producedural e transforma-lo para o paradigma orientado a aspectos. Dessa forma, o artigo nao foi incluido pois o mesmo nao apresenta tecnica de mineracao de interesse transversal para o paradigm OO para OA.},
author = {Majumdar, Dipankar},
booktitle = {Proceedings of the 2009 IEEE/ACM International Conference on Automated Software Engineering},
doi = {http://dx.doi.org/10.1109/ASE.2009.41},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Majumdar/Proceedings of the 2009 IEEEACM International Conference on Automated Software Engineering/Majumdar - 2009 - Migration from Procedural Programming to Aspect Oriented Paradigm.pdf:pdf},
isbn = {978-0-7695-3891-4},
keywords = {Aspect-Oriented-Model and Verification,Separation-of-Concerns,Traceability},
pages = {712--715},
publisher = {IEEE Computer Society},
series = {ASE '09},
title = {{Migration from Procedural Programming to Aspect Oriented Paradigm}},
url = {http://dx.doi.org/10.1109/ASE.2009.41},
year = {2009}
}
@article{Majumdar2011,
abstract = {Aspect Mining is a dynamic area of research in the field of Soft- ware Engineering. Aspects are concerns that are intermingled with other concerns thereby reducing the understandability, maintaina- bility and scalability of the code. The concept of Separation of Concerns (SoC) is often achieved untill the Design Phase, but gets difficult in the later phases of the software development life cycle (SDLC). During program maintenance the maintenance team is left with an aggregation of procedures and variables, both of which may be generically called user-defined tokens. This paper propos- es a graph-based approach to address the problem of SoC during program maintenance. This is done by the removal of some source code elements (e.g., user-defined-tokens), which can be responsi- ble for tangled concerns and complex code. These user-defined- tokens can be treated separately under the Aspect Oriented Pro- gramming paradigm. The paper proposes a graphical-model, which represents a procedural program and defines a mathemati- cal-model to identify and remove the tangled and interleaving code-fragments. Thereafter these code fragments are traced back to the requirements engineering level through a formal traceability model. This process yields the corresponding user requirements that are associated with these scattered code fragments. These identified user requirements are put forward as Aspects, to be han- dled or re-engineered under the Aspect Oriented Programming paradigm.},
annote = {Artigo Nao incluido, apesar do mesmo apresentar tecnica de mineracao de interesse transversal. O motivo da exclusao \'{e} que o mesmo propoe uma tecnica de mineracao para o paradigma procedural.},
author = {Majumdar, Dipankar and Kanjilal, Ananya and Bhattacharya, Swapan},
doi = {10.1145/1943371.1943387},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Majumdar, Kanjilal, Bhattacharya/ACM SIGSOFT Software Engineering Notes/Majumdar, Kanjilal, Bhattacharya - 2011 - Separation of Scattered Concerns A Graph Based Approach for Aspect Mining.pdf:pdf},
issn = {01635948},
journal = {ACM SIGSOFT Software Engineering Notes},
keywords = {aspect mining,rela-,separation-of-concerns,tional algebra,user-defined tokens},
month = mar,
number = {2},
pages = {1},
title = {{Separation of Scattered Concerns: A Graph Based Approach for Aspect Mining}},
url = {http://portal.acm.org/citation.cfm?doid=1943371.1943387},
volume = {36},
year = {2011}
}
@inproceedings{Marcus:2005:STC:1058432.1059343,
abstract = {Concept location in source code is the process that identifies where a software system implements a specific concept. While it is well accepted that concept location is essential for the maintenance of complex procedural code like code written in C, it is much less obvious whether it is also needed for the maintenance of the Object-Oriented code. After all, the Object-Oriented code is structured into classes and well-designed classes already implement concepts, so the issue seems to be reduced to the selection of the appropriate class. The objective of our work is to see if the techniques for concept location are still needed (they are) and whether Object-Oriented structuring facilitates concept location (it does not). This paper focuses on static concept location techniques that share common prerequisites and are search the source code using regular expression matching, or static program dependencies, or information retrieval. The paper analyses these techniques to see how they compare to each other in terms of their respective strengths and weaknesses.},
address = {Washington, DC, USA},
annote = {Artigo incluido.},
author = {Marcus, Andrian and Rajlich, Vaclav and Buchta, Joseph and Petrenko, Maksym and Sergeyev, Andrey},
booktitle = {Proceedings of the 13th International Workshop on Program Comprehension},
doi = {10.1109/WPC.2005.33},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Marcus et al/Proceedings of the 13th International Workshop on Program Comprehension/Marcus et al. - 2005 - Static Techniques for Concept Location in Object-Oriented Code.pdf:pdf},
isbn = {0-7695-2254-8},
pages = {33--42},
publisher = {IEEE Computer Society},
title = {{Static Techniques for Concept Location in Object-Oriented Code}},
url = {http://dl.acm.org/citation.cfm?id=1058432.1059343},
year = {2005}
}
@article{Marin:2007:ICC:1314493.1314496,
abstract = {Aspect mining is a reverse engineering process that aims at finding crosscutting concerns in ex- isting systems. This article proposes an aspect mining approach based on determining methods that are called from many different places, and hence have a high fan-in, which can be seen as a symptom of crosscutting functionality. The approach is semiautomatic, and consists of three steps: metric calculation, method filtering, and call site analysis. Carrying out these steps is an interactive process supported by an Eclipse plug-in called FINT. Fan-in analysis has been applied to three open source Java systems, totaling around 200,000 lines of code. The most interesting concerns identified are discussed in detail, which includes several concerns not previously dis- cussed in the aspect-oriented literature. The results show that a significant number of crosscutting concerns can be recognized using fan-in analysis, and each of the three steps can be supported by tools.},
address = {New York, NY, USA},
annote = {Artigo incluido.},
author = {Marin, Marius and Deursen, Arie Van and Moonen, Leon},
doi = {http://doi.acm.org/10.1145/1314493.1314496},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Marin, Deursen, Moonen/ACM Trans. Softw. Eng. Methodol/Marin, Deursen, Moonen - 2007 - Identifying Crosscutting Concerns Using Fan-In Analysis.pdf:pdf},
issn = {1049-331X},
journal = {ACM Trans. Softw. Eng. Methodol.},
keywords = {Aspect-oriented programming,crosscutting concerns,fan-in metric,reverse engineering},
number = {1},
pages = {3:1----3:37},
publisher = {ACM},
title = {{Identifying Crosscutting Concerns Using Fan-In Analysis}},
url = {http://doi.acm.org/10.1145/1314493.1314496},
volume = {17},
year = {2007}
}
@article{Marin2006,
abstract = {The increasing number of aspect mining techniques proposed in literature calls for a methodological way of comparing and combining them in order to assess, and improve on, their qual- ity. This paper addresses this situation by proposing a com- mon framework based on crosscutting concern sorts which al- lows for consistent assessment, comparison and combination of aspect mining techniques. The framework identifies a set of requirements that ensure homogeneity in formulating the min- ing goals, presenting the results and assessing their quality. We demonstrate feasibility of the approach by retrofitting an existing aspect mining technique to the framework, and by using it to design and implement two new mining tech- niques. We apply the three techniques to a known aspect mining benchmark and show how they can be consistently as- sessed and combined to increase the quality of the results. The techniques and combinations are implemented in FINT, our publicly available free aspect mining tool},
annote = {Artigo incluido.},
author = {Marin, Marius and Moonen, Leon and Deursen, Arie},
doi = {10.1109/WCRE.2006.6},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Marin, Moonen, Deursen/2006 13th Working Conference on Reverse Engineering/Marin, Moonen, Deursen - 2006 - A common framework for aspect mining based on crosscutting concern sorts.pdf:pdf},
isbn = {0-7695-2719-1},
journal = {2006 13th Working Conference on Reverse Engineering},
pages = {29--38},
publisher = {Ieee},
title = {{A common framework for aspect mining based on crosscutting concern sorts}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4023974},
year = {2006}
}
@inproceedings{Marin:2007:ICC:1306878.1307366,
abstract = {In this paper we propose a systematic strategy for migrating crosscutting concerns in existing object-oriented systems to aspect-based solutions. The proposed strategy consists of four steps: mining, exploration, documentation and refactoring of crosscutting concerns. We discuss in detail a new approach to aspect refactoring that is fully integrated with our strategy, and apply the whole strategy to an object-oriented system, namely the JHOTDRAW framework. The result of this migration is made available as an open-source project, which is the largest aspect refactoring available to date. We report on our experiences with conducting this case study and re- flect on the success and challenges of the migration process, as well as on the feasibility of automatic aspect refactoring.},
address = {Washington, DC, USA},
annote = {Artigo incluido.},
author = {Marin, Marius and Moonen, Leon and van Deursen, Arie},
booktitle = {Proceedings of the Seventh IEEE International Working Conference on Source Code Analysis and Manipulation},
doi = {10.1109/SCAM.2007.4},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Marin, Moonen, Deursen/Proceedings of the Seventh IEEE International Working Conference on Source Code Analysis and Manipulation/Marin, Moonen, Deursen - 2007 - An Integrated Crosscutting Concern Migration Strategy and its Application to JHOTDRAW.pdf:pdf},
isbn = {0-7695-2880-5},
pages = {101--110},
publisher = {IEEE Computer Society},
title = {{An Integrated Crosscutting Concern Migration Strategy and its Application to JHOTDRAW}},
url = {http://dl.acm.org/citation.cfm?id=1306878.1307366},
year = {2007}
}
@inproceedings{Marin:2005:CCC:1090952.1091904,
abstract = {Refactoring software to apply aspect oriented solutions requires a clear understanding of what are the potential crosscutting concerns and which aspect solutions to replace them with. This process can benefit from the recognition of recurring generic concerns and their reusable aspect solutions. In this paper, we propose a classification of crosscutting concerns in sorts based on the analysis of various refactoring efforts. We discuss how sorts help concern understanding and refactoring, how they support the identification of crosscutting concerns, and how they can contribute to the evolution of aspect languages.},
address = {Washington, DC, USA},
annote = {Artigo n\~{a}ao incluido. Pois o mesmo n\~{a}ao apresenta nenhuma tecnica de mineracao de interesses transversais.},
author = {Marin, Marius and Moonen, Leon and van Deursen, Arie},
booktitle = {Proceedings of the 21st IEEE International Conference on Software Maintenance},
doi = {10.1109/ICSM.2005.7},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Marin, Moonen, van Deursen/Proceedings of the 21st IEEE International Conference on Software Maintenance/Marin, Moonen, van Deursen - 2005 - A Classification of Crosscutting Concerns.pdf:pdf},
isbn = {0-7695-2368-4},
pages = {673--676},
publisher = {IEEE Computer Society},
title = {{A Classification of Crosscutting Concerns}},
url = {http://dl.acm.org/citation.cfm?id=1090952.1091904},
year = {2005}
}
@inproceedings{Marin:2004:IAU:1038267.1039045,
abstract = {The issues of code scattering and tangling, thus of achieving a better modularity for a system\'{y}s concerns, are addressed by the paradigm of aspect orientation. Aspect mining is a reverse engineering process that aims at finding crosscutting concerns in existing systems. This paper describes a technique based on determining methods that are called from many different places (and hence have a high fan-in) to identify candidate aspects in a number of open-source Java systems. The most interesting aspects identified are discussed in detail, which includes several concerns not previously discussed in the aspect-oriented literature. The results show that a significant number of aspects can be recognized using fan-in analysis, and that the technique is suitable for a high degree of automation.},
address = {Washington, DC, USA},
annote = {Artigo incluido.

      },
author = {Marin, Marius and van Deursen, Arie and Moonen, Leon},
booktitle = {Proceedings of the 11th Working Conference on Reverse Engineering},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Marin, van Deursen, Moonen/Proceedings of the 11th Working Conference on Reverse Engineering/Marin, van Deursen, Moonen - 2004 - Identifying Aspects Using Fan-In Analysis.pdf:pdf},
isbn = {0-7695-2243-2},
pages = {132--141},
publisher = {IEEE Computer Society},
title = {{Identifying Aspects Using Fan-In Analysis}},
url = {http://dl.acm.org/citation.cfm?id=1038267.1039045},
year = {2004}
}
@article{Mens2008,
abstract = {The research domain of aspect mining studies the prob- lem of (semi-)automatically identifying potential aspects and crosscutting concerns in a software system, to improve the system’s comprehensibility or enable its migration to an aspect-oriented solution. Unfortunately, most proposed as- pect mining techniques have not lived up to their expecta- tions yet. In this paper we provide a list of problems that most aspect mining techniques suffer from and identify some of the root causes underlying these problems. Based upon this analysis, we conclude that many of the problems seem to be caused directly or indirectly by the use of inappro- priate techniques, a lack of rigour and semantics on what is being mined for and how, and in how the results of the mining process are presented to the user},
annote = {Artigo incluido.
        
        
        Pitfalls in Aspect Mining – Daniel San Mart\'{\i}n        
O artigo fala dos problemas apresentados nas t\'{e}cnicas mais utilizadas em minera\c{c}\~{a}o de interesses, qual \'{e} a causa dos problemas e qual \'{e} o futuro desta \'{a}rea de pesquisa.
A area de minera\c{c}\~{a}o de interesses preocupa-se de encontrar interesses transversais (aspectos candidatos) dentro do c\'{o}digo fonte para poder ser refatorizados em aspectos. O artigo est\'{a} focado em analisar propostas de mineria de aspectos automatizadas que utilizam t\'{e}cnicas de data mining como “data analysis, formal concept analysis, cluster analysis” e t\'{e}cnicas de analise de c\'{o}digo como “program slicing, software metrics and heuristics, clone detection, pattern matching, dynamic analysis”. 
        
                  
Os problemas encontrados s\~{a}o os seguintes:
                          
Pobre precis\~{a}o (P = aspectos candidatos relevantes/todos os candidatos encontrados). O problema \'{e} que a maioria das t\'{e}cnicas apresentam muitos falsos positivos que tem impacto na escalabilidade e os resultados s\~{a}o apresentados sem indicar o tipo de granularidade que pode ser a um nivel individual, do c\'{o}digo ou grupo de interesses. A falta de um usuario especialista em identificar interesses para fazer uma compara\c{c}\~{a}o com a ferramenta de minera\c{c}\~{a}o de aspectos, fazem que os resultados publicados perdem subjetividade. 
                  
Pobre recall (R= aspectos candidatos relevantes n\~{a}o descobertos/aspectos candidatos relevantes ). Um dos problemas encontrados \'{e} que n\~{a}o se conhece quais s\~{a}o os aspectos relevantes a serem identificados a menos que exista um usuario especialista. Outro problema \'{e} que a maioria das t\'{e}cnicas, identifican apenas alguns sintomas de aspectos perdendo ocorr\^{e}ncias de aspectos que apresentem outros sintomas. A maior precis\~{a}o menor recall e vice versa.        
                  
Subjetividade. Muitas t\'{e}cnicas apresentam ambiguidade em seus resultados. Depende das defini\c{c}\~{o}es dos aspectos que as pessoas indicam. Cada ferramenta aplica seus pr\'{o}pios filtros e s\~{a}o as pessoas que finalmente fazem a selecc\~{a}o dos aspectos, assim, a interven\c{c}\~{a}o dos usuarios podem causar subjetividade.
                  
Escalabilidade. Um factor importante a considerar \'{e} o tempo-efici\^{e}ncia da ferramenta. A quantidade de tempo requerido para calcular seus resultados. Por\'{e}m, onde existem maiores problemas \'{e} onde existe interven\c{c}\~{a}o humana. Pr\'{e}-processamento(preparar dados de entrada) e p\'{o}s-processamento(analisar os resultados). 
                  
Valida\c{c}\~{a}o Emp\'{\i}rica. Para validar a qualidade de uma ferramenta, devem ser considerados a medi\c{c}\~{a}o da preci\c{c}\~{a}o e o recall dos resultados em distintos n\'{\i}veis de granularidade. Por\'{e}m, precisa-se de um benchmark comum para evaluar t\'{e}cnicas de minera\c{c}\~{a}o de aspectos que reconheza distintos tipos de aspectos onde exista um consenso. 
                  
Outros problemas encontrados. como compara\c{c}\~{a}o dos resultados de diferentes t\'{e}cnicas, compoer distintas t\'{e}cnicas para melhores resultados e o jeito em que os interesses s\~{a}o programados pode mudar dependendo do programador.
                  
Analise dos problemas:        
        
        
Os problemas t\^{e}m suas ra\'{\i}zes por usar t\'{e}cnicas inadequadas (t\'{e}cnicas de prop\'{o}sito geral, suposi\c{c}\~{o}es rigidas, propostas excessivamente otimista, t\'{e}cnicas que identifican c\'{o}digo espalhado mas n\~{a}o enmaranhado, falta de informa\c{c}\~{a}o sem\'{a}ntica), Defini\c{c}\~{o}es imprecisas (extra\c{c}\~{a}o de interesses que n\~{a}o precisam ser convertidas em aspectos), representa\c{c}\~{a}o inadequada dos resultados(granularidade e uma representa\c{c}\~{a}o em formato estandar e assim fica dificil comparar e combinar com diferentes t\'{e}cnicas).
        
                  
Conclus\~{o}es finais:        
        
        
Com rela\c{c}\~{a}o ao presi\c{c}\~{a}o e recall: Para um entendimento inicial de um programa de software, pouca presi\c{c}\~{a}o e recall n\~{a}o \'{e} necessariamente dram\'{a}tico. Se precisa-se migrar em aspectos, estos indicadores devem ser rigorosos.
        
        
Com rela\c{c}\~{a}o as t\'{e}cnicas de minera\c{c}\~{a}o de aspectos: 
        
Deveriam t\^{e}r em conta uma maior quantidade de informa\c{c}\~{a}o sem\'{a}ntica, olhando sintomas de “tangling” em adi\c{c}\~{a}o dos sintomas de “scattering”. Al\'{e}m disso, tomar em conta outras informa\c{c}\~{o}es como se realmente precisa-se tranformar interesses em aspectos e podre t\^{e}r uma boa justifica\c{c}\~{a}o para isso. 
        
Utilizar um framework para comparar metodologicamente difetentes t\'{e}cnicas . 
        
Precisa-se de t\'{e}cnicas mais inteligentes, a tend\^{e}ncia \'{e} combinar t\'{e}cnicas que fazam minera\c{c}\~{a}o de padr\~{o}es de desenho (ocurrencias de padr\~{o}es) em vez de representa\c{c}\~{o}es de estruturas, combinado com m\'{a}quinas de estado para filtrar falsos positivos. 
        
AspectJ \'{e} criticado por a falta de base sem\^{a}ntica.      },
author = {Mens, Kim and Kellens, Andy and Krinke, Jens},
doi = {10.1109/WCRE.2008.10},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Mens, Kellens, Krinke/2008 15th Working Conference on Reverse Engineering/Mens, Kellens, Krinke - 2008 - Pitfalls in Aspect Mining.pdf:pdf},
isbn = {978-0-7695-3429-9},
journal = {2008 15th Working Conference on Reverse Engineering},
month = oct,
pages = {113--122},
publisher = {Ieee},
title = {{Pitfalls in Aspect Mining}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4656400},
year = {2008}
}
@inproceedings{Mesbah:2005:CCJ:1092361.1092691,
abstract = {We explore the evolution benefits of adopting aspects in a J2EE setting by studying crosscutting concerns in a typical J2EE application. To identify these concerns, we take a top-down as well as a bottom-up approach. In the topdown view we focus on typical concerns that are known to be crosscutting (e.g., persistence), the way they are currently implemented and the possible gains and benefits if solved by aspects. In the bottom-up approach we take a look at the application\'{y}s source code, and apply aspect mining techniques in order to find crosscutting concerns. We discuss how such concerns can be represented in an aspect-oriented language (viz. AspectJ), and reflect on the results in terms of maintainability and evolvability of the affected system.},
address = {Washington, DC, USA},
annote = {Artigo incluido.},
author = {Mesbah, Ali and van Deursen, Arie},
booktitle = {Proceedings of the Seventh IEEE International Symposium on Web Site Evolution},
doi = {10.1109/WSE.2005.4},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Mesbah, van Deursen/Proceedings of the Seventh IEEE International Symposium on Web Site Evolution/Mesbah, van Deursen - 2005 - Crosscutting Concerns in J2EE Applications.pdf:pdf},
isbn = {0-7695-2470-2},
pages = {14--21},
publisher = {IEEE Computer Society},
title = {{Crosscutting Concerns in J2EE Applications}},
url = {http://dl.acm.org/citation.cfm?id=1092361.1092691},
year = {2005}
}
@article{Min2008239,
abstract = {In order to identify effectively scattering code and tangling code
introduced by crosscutting concerns in legacy system, an approach
based on program dependence graph (PDG) for aspect mining is proposed
in this paper. According to the intrinsic attribute of crosscutting
concern, the dependence relationship between crosscutting concerns
and core concerns is firstly examined, followed by analyzing its
structure presentation on PDG. For a single method, combining the
semantic information of a program, a virtual node is firstly introduced
into its PDG to represent its core functionality and all statements
which impact the core functionality is virtually depended by it.
Then, topology analysis on PDG is performed to figure out the core
code starting from the virtual node and the cross-cutting code determining
by computing connected components in PDG. As a result, all potential
crosscutting code can be separated from core functionality. A case
study shows that our approach can discover effectively both scattering
code and tangling code in legacy code.},
annote = {Artigo nao incluido, pois o mesmo nao estava disponivel eletronicamente.},
author = {{Min H.a b Xu}, B.a b Qian J.a b},
issn = {10010505},
journal = {Dongnan Daxue Xuebao (Ziran Kexue Ban)/Journal of Southeast University (Natural Science Edition)},
keywords = { Aspect mining; Crosscutting concern; Program depe, Computer programming,Computer software maintenance; Semantics},
number = {2},
pages = {239--243},
title = {{Aspect mining based on program dependence graph}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-43249084533\&partnerID=40\&md5=9a9e33ea2bea0a94c409d28c576d3400},
volume = {38},
year = {2008}
}
@inproceedings{Moldovan2006,
abstract = {Aspect Oriented Programming is a programming paradigm that addresses the issue of crosscutting concerns. Aspect mining is a process that tries to identify crosscutting con- cerns in existing software systems. The goal is to refactor the existing systems to use aspect oriented programming to make them easier to maintain and to evolve. This paper presents a new approach in aspect mining that uses clustering and proposes two techniques: a k-means based clustering technique and a hierarchical agglomerative based clustering technique. We are trying to identify the meth- ods that have the code scattering symptom. For a method, we consider as indication of code scattering a big number of calling methods and, also, a big number of calling classes. In order to group the best methods (candidates), we use in our approach the vector-space model for defining the similarity between methods. For testing the efficiency of the proposed techniques, a number of Java applications are being used.},
annote = {Artigo incluido.},
author = {Moldovan, G.S. and Serban, G.},
booktitle = {Proceedings of Linking Aspect Technology and Evolution (LATE) Workshop},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Moldovan, Serban/Proceedings of Linking Aspect Technology and Evolution (LATE) Workshop/Moldovan, Serban - 2006 - Aspect Mining using a Vector-Space Model Based Clustering Approach.pdf:pdf},
keywords = {aspect mining,clustering},
pages = {36--40},
publisher = {Citeseer},
title = {{Aspect Mining using a Vector-Space Model Based Clustering Approach}},
url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.1810\&amp;rep=rep1\&amp;type=pdf},
year = {2006}
}
@article{Monteiro2006214,
abstract = {In this paper, we contribute to the characterisation of a programming style specific to aspect-oriented programming. For this purpose, we present a collection of refactorings for aspect-oriented source code, comprising refactorings to enable extraction to aspects of crosscutting concerns from object-oriented legacy code, the subsequent tidying up of the extracted aspects and factoring out of common code from similar aspects to superaspects. The second group of refactorings is documented in detail. In addition, we propose some new aspect-oriented code smells, including one smell that is specific to aspect modules. We also propose a reinterpretation of some of the traditional object-oriented code smells in the light of aspect-orientation, to detect the presence of crosscutting concerns. © Springer-Verlag Berlin Heidelberg 2006.},
annote = {Artigo incluido.},
author = {{Monteiro M.P.a Fernandes}, J.M.b},
editor = {{Rashid A.}, Aksit M},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Monteiro M.P.a Fernandes/Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)/Monteiro M.P.a Fernandes - 2006 - Towards a catalogue of refactorings and code smells for AspectJ.pdf:pdf},
isbn = {3540329722; 9783540329725},
issn = {03029743},
journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
keywords = {Aspect-oriented programming,Aspect-oriented sour,Codes (symbols),Computation theory,Feature extra,Object oriented programming},
pages = {214--258},
title = {{Towards a catalogue of refactorings and code smells for AspectJ}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-37149050512\&partnerID=40\&md5=08f609d00e8b66fdcd7b2a2c7c4da261},
volume = {3880 LNCS},
year = {2006}
}
@inproceedings{Monteiro:2005:TCA:1052898.1052908,
abstract = {In this paper, we present a collection of aspect-oriented refactorings covering both the extraction of aspects from object-oriented legacy code and the subsequent tidying up of the resulting aspects. In some cases, this tidying up entails the replacement of the original implementation with a different, centralized design, made possible by modularization. The collection of refactorings includes the extraction of common code in various aspects into abstract superaspects. We review the traditional object-oriented code smells in the light of aspect-orientation and propose some new smells for the detection of crosscutting concerns. In addition, we propose a new code smell that is specific to aspects.},
address = {New York, NY, USA},
annote = {Artigo incluido.},
author = {Monteiro, Miguel P and Fernandes, Jo\~{a}o M},
booktitle = {Proceedings of the 4th international conference on Aspect-oriented software development},
doi = {http://doi.acm.org/10.1145/1052898.1052908},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Monteiro, Fernandes/Proceedings of the 4th international conference on Aspect-oriented software development/Monteiro, Fernandes - 2005 - Towards a catalog of aspect-oriented refactorings.pdf:pdf},
isbn = {1-59593-042-6},
keywords = {aspect-oriented programming,code smells,object-oriented programming,programming style,refactoring},
pages = {111--122},
publisher = {ACM},
series = {AOSD '05},
title = {{Towards a catalog of aspect-oriented refactorings}},
url = {http://doi.acm.org/10.1145/1052898.1052908},
year = {2005}
}
@article{Monteiro2010,
abstract = {The current state-of-the-art in aspect mining is well advanced for object-oriented programming languages but until now neglected the MATLAB language. This paper contributes to fill that gap by proposing a novel notion of crosscutting concern, tailored for the specific characteristics of MATLAB code bases. We present an exploratory, token-based, approach to aspect mining for MATLAB. An analysis of data obtained from a tool using this approach over 209 publicly available MATLAB files indicate the approach is valid for detecting several kinds of crosscutting concerns in MATLAB systems.},
annote = {
        Artigo n\~{a}ao incluido, 
        
Artigo n\~{a}ao incluido, pois o mesmo idenfica concerns em sistemas MATLAB e n\~{a}o em paradigmas orientado a objetos...},
author = {Monteiro, Miguel P and Posea, Simona and Lisboa, Nova De},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Monteiro, Posea, Lisboa/Science/Monteiro, Posea, Lisboa - 2010 - Identification and Characterization of Crosscutting Concerns in MATLAB Systems 1.pdf:pdf},
journal = {Science},
keywords = {aspect mining,code tangling,crosscutting concerns,matlab},
pages = {149--160},
title = {{Identification and Characterization of Crosscutting Concerns in MATLAB Systems 1}},
year = {2010}
}
@inproceedings{4659250,
abstract = {This paper provides a roadmap for dealing with crosscutting concerns while trying to understand, maintain, and evolve existing software systems. We describe an integrated, systematic, approach that helps a software engineer with identifying, documenting and migrating crosscutting concerns in the source code of a software system, and discuss the integration considerations. We conclude with a number of lessons learned and directions for future research.},
annote = {Artigo incluido.},
author = {Moonen, L},
booktitle = {Frontiers of Software Maintenance, 2008. FoSM 2008.},
doi = {10.1109/FOSM.2008.4659250},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Moonen/Frontiers of Software Maintenance, 2008. FoSM 2008/Moonen - 2008 - Dealing with crosscutting concerns in existing software.pdf:pdf},
keywords = {crosscutting,software engineering,software mainten},
pages = {68--77},
title = {{Dealing with crosscutting concerns in existing software}},
year = {2008}
}
@article{Mortensen:2008:TDA:1365095.1365279,
abstract = {Aspect-based refactoring, called aspectualization, involves moving program code that implements cross-cutting concerns into aspects. Such refactoring can improve the maintainability of legacy systems. Long compilation and weave times, and the lack of an appropriate testing methodology are two challenges to the aspectualization of large legacy systems. We propose an iterative test driven approach for creating and introducing aspects. The approach uses mock systems that enable aspect developers to quickly experiment with different pointcuts and advice, and reduce the compile and weave times. The approach also uses weave analysis, regression testing, and code coverage analysis to test the aspects. We developed several tools for unit and integration testing. We demonstrate the test driven approach in the context of large industrial C++ systems, and we provide guidelines for mock system creation.},
address = {Newton, MA, USA},
annote = {Artigo n\~{a}ao incluido.

        

        
artigo n\~{a}ao incluido pois o mesmo n\~{a}ao apresenta propriamente dita uma t\'{e}ecnica de minera\c{c}\~{a}ao de interesses transversal (aspect mining). No artigo os autores utilizam test driven approach para refatorar um sistema OO em AO.},
author = {Mortensen, Michael and Ghosh, Sudipto and Bieman, James M},
doi = {10.1016/j.infsof.2007.06.002},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Mortensen, Ghosh, Bieman/Inf. Softw. Technol/Mortensen, Ghosh, Bieman - 2008 - A test driven approach for aspectualizing legacy software using mock systems.pdf:pdf},
issn = {0950-5849},
journal = {Inf. Softw. Technol.},
keywords = {Aspect-oriented programming,Legacy systems,Mock systems,Refactoring,Testing},
number = {7-8},
pages = {621--640},
publisher = {Butterworth-Heinemann},
title = {{A test driven approach for aspectualizing legacy software using mock systems}},
url = {http://dl.acm.org/citation.cfm?id=1365095.1365279},
volume = {50},
year = {2008}
}
@article{Mulder2010,
abstract = {Cross-cutting concerns are pieces of functionality that have not been captured into a separate module, thereby hinder- ing program comprehension and maintainability. Solving these problems requires first identifying these cross-cutting concerns in pieces of software. Several methods for identifi- cation have been proposed but the option of using software repository mining has largely been left unexplored. That technique can uncover relationships between modules that may not be present in the source code and thereby provide a different perspective on the cross-cutting concerns in a software system. We perform software repository mining on the repositories of two software systems for which the cross- cutting concerns are known: JHotDraw and Tomcat. Based on the results of the evaluation, we make some suggestions for future directions in the area of identifying crosscutting concerns using software repository mining★},
annote = {Artigo incluido},
author = {Mulder, Frank and Zaidman, Andy},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Mulder, Zaidman/Structure/Mulder, Zaidman - 2010 - Identifying Cross-Cutting Concerns Using Software Repository Mining.pdf:pdf},
isbn = {9781450301282},
journal = {Structure},
pages = {23--32},
title = {{Identifying Cross-Cutting Concerns Using Software Repository Mining}},
year = {2010}
}
@article{Multidimensional2001,
annote = {Artigo n\~{a}ao incluido.

        
O mesmo n\~{a}o apresenta nenhuma t\'{e}cnica de minera\c{c}\~{a}o de interesses transversal.},
author = {Multidimensional, Using and Of, Separation and To, Concerns},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Multidimensional, Of, To/Communications of the ACM/Multidimensional, Of, To - 2001 - USING MULTIDIMENSIONAL SEPARATION OF CONCERNS TO (RE)SHAPE EVOLVING SOFTWARE.pdf:pdf},
journal = {Communications of the ACM},
number = {10},
pages = {43--50},
title = {{USING MULTIDIMENSIONAL SEPARATION OF CONCERNS TO (RE)SHAPE EVOLVING SOFTWARE}},
volume = {44},
year = {2001}
}
@inproceedings{Nguyen2011361,
abstract = {Cross-cutting concerns are unavoidable and create difficulties in the development and maintenance of large-scale systems. In this paper, we present a novel approach that identifies certain groups of code units that potentially share some cross-cutting concerns and recommends them for creating and updating aspects. Those code units, called concern peers, are detected based on their similar interactions (similar calling relations in similar contexts, either internally or externally). The recommendation is applicable to both the aspectization of non-aspect-oriented programs (i.e. for aspect creation), and the evolution of aspect-oriented programs (i.e. for aspect updating). The empirical evaluation on several real-world software systems shows that our approach is scalable and provides useful recommendations. © 2011 ACM.},
address = {New York, NY, USA},
annote = {Artigo incluido...
          

        
      },
author = {{Nguyen T.T.}, Nguyen H V Nguyen H A Nguyen T N and Nguyen, Tien N Tung Thanh Tien N Tung Thanh and Nguyen, Hoan Anh Hung Viet Hoan Anh Hung Viet},
booktitle = {Proceedings - International Conference on Software Engineering},
doi = {http://doi.acm.org/10.1145/1985793.1985843},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Nguyen T.T., Nguyen, Nguyen/Proceedings - International Conference on Software Engineering/Nguyen T.T., Nguyen, Nguyen - 2011 - Aspect recommendation for evolving software.pdf:pdf},
isbn = {9781450304450},
issn = {02705257},
keywords = {Aspect-oriented programs,Computer software maintenance,Cross-cutting,Empirical evaluations,Software engineering,Software systems,aspect mining,concern p,concern peer,cross-cutting concern},
pages = {361--370},
publisher = {ACM},
series = {ICSE '11},
title = {{Aspect recommendation for evolving software}},
url = {http://doi.acm.org/10.1145/1985793.1985843 http://www.scopus.com/inward/record.url?eid=2-s2.0-79959908816\&partnerID=40\&md5=f53ae51251f3a202245c9f5e0141233d},
year = {2011}
}
@article{Nora2006,
abstract = {Aspect mining aims to identify crosscutting concerns in legacy systems. The code implementing a crosscutting concern is often spread over many different parts of an application. Identifying such code automatically greatly improves the maintainability of the application and enables migration of exsisting (object-oriented) programs to aspect oriented ones. In this study, we present a model driven approach for aspect mining, which automatically identifies desirable candidates concerns, without requiring input from the user. The aspect miner acts as a model transformer converting the program model to a concern-oriented model. This model is more abstract and it is constructed by using a concern library. The concern library give concern descriptions in terms of plans.},
annote = {Artigo incluido.},
author = {Nora, B},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Nora/Inform. Technol. J/Nora - 2006 - A model-driven approach to aspect mining.pdf:pdf},
journal = {Inform. Technol. J},
title = {{A model-driven approach to aspect mining}},
url = {http://www.doaj.org/doaj?func=abstract\&amp;id=600632},
year = {2006}
}
@inproceedings{Nunes:2011:PIM:1960314.1960347,
abstract = {An abstract is not available.},
address = {New York, NY, USA},
annote = {Artigo n\~{a}o incluido. Pois o mesmo n\~{a}o tem mais do que duas p\'{a}ginas.},
author = {Nunes, Camila},
booktitle = {Proceedings of the tenth international conference on Aspect-oriented software development companion},
doi = {http://doi.acm.org/10.1145/1960314.1960347},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Nunes/Proceedings of the tenth international conference on Aspect-oriented software development companion/Nunes - 2011 - On the proactive identification of mistakes on concern mapping tasks.pdf:pdf},
isbn = {978-1-4503-0606-5},
keywords = {concern mapping,experimental evaluation,heuristics,mapping mistakes},
pages = {85--86},
publisher = {ACM},
series = {AOSD '11},
title = {{On the proactive identification of mistakes on concern mapping tasks}},
url = {http://doi.acm.org/10.1145/1960314.1960347},
year = {2011}
}
@inproceedings{5623200,
abstract = {To solve the identification and comprehension problem of crosscutting concerns in existing legacy software system, a framework of aspects-oriented software reverse engineering was proposed. An approach on re-modularizing traversal features of legacy system was presented, which based on various Unified Modeling Language (UML) diagrams. While modeling crosscutting concerns in UML use case diagrams, the non-functional requirements that affect several use case modules can be enveloped into aspects modules with stereotype mechanism. The recurring message transmission patterns can be re-modularized as aspects in UML sequence diagrams with UML collaborations. Standard UML activity diagram notations were extended and modified by nodes fusion and addition, which support the graphical composition operation between crosscutting behaviors and primary business rules of concurrent system. The case study indicates traversal features of software system can be extracted and re-modularized from various perspectives in aspects-oriented reverse engineering, which improves the comprehensibility and maintainability of legacy system.},
annote = {Artigo n\~{a}o incluido... Pois o mesmo n\~{a}ao apresenta t\'{e}cnica de mineracao especifica para codigo fonte e sim para diagrama de caso de uso e diagrama de classe....},
author = {Ping, Zhang and Yang, Su},
booktitle = {Computer Application and System Modeling (ICCASM), 2010 International Conference on},
doi = {10.1109/ICCASM.2010.5623200},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Ping, Yang/Computer Application and System Modeling (ICCASM), 2010 International Conference on/Ping, Yang - 2010 - Understanding the aspects from various perspectives in aspects-oriented software reverse engineering.pdf:pdf},
keywords = {UML activity diagram notations,UML collaborations},
pages = {V11--311 --V11--314},
title = {{Understanding the aspects from various perspectives in aspects-oriented software reverse engineering}},
volume = {11},
year = {2010}
}
@inproceedings{Poshyvanyk:2007:CFC:1270394.1271345,
abstract = {The paper addresses the problem of concept location in source code by presenting an approach which combines Formal Concept Analysis (FCA) and Latent Semantic Indexing (LSI). In the proposed approach, LSI is used to map the concepts expressed in queries written by the programmer to relevant parts of the source code, presented as a ranked list of search results. Given the ranked list of source code elements, our approach selects most relevant attributes from these documents and organizes the results in a concept lattice, generated via FCA. The approach is evaluated in a case study on concept location in the source code of Eclipse, an industrial size integrated development environment. The results of the case study show that the proposed approach is effective in organizing different concepts and their relationships present in the subset of the search results. The proposed concept location method outperforms the simple ranking of the search results, reducing the programmers' effort.},
address = {Washington, DC, USA},
annote = {Artigo incluido.

        
O mesmo apresenta uma tecnica de mineracao de interesses utilizando a t\'{e}ecnica denominada formal concept analysis.},
author = {Poshyvanyk, Denys and Marcus, Andrian},
booktitle = {Proceedings of the 15th IEEE International Conference on Program Comprehension},
doi = {10.1109/ICPC.2007.13},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Poshyvanyk, Marcus/Proceedings of the 15th IEEE International Conference on Program Comprehension/Poshyvanyk, Marcus - 2007 - Combining Formal Concept Analysis with Information Retrieval for Concept Location in Source Code.pdf:pdf},
isbn = {0-7695-2860-0},
pages = {37--48},
publisher = {IEEE Computer Society},
title = {{Combining Formal Concept Analysis with Information Retrieval for Concept Location in Source Code}},
url = {http://dl.acm.org/citation.cfm?id=1270394.1271345},
year = {2007}
}
@inproceedings{4406301,
abstract = {The fact that crosscutting concerns cannot be well modularized in object-oriented software is an impediment to program comprehension: the implementation of a concern is typically scattered over many locations and tangled with the implementation of other concerns, resulting in a system that is hard to explore and understand. Aspect mining aims to identify crosscutting concerns in a system, thereby improving the system s comprehensibility and enabling migration of existing (object-oriented) programs to aspect-oriented ones. In this paper, we briefly introduce DynAMiT, a dynamic aspect mining tool that detects crosscutting concerns based on tracing method executions. While the approach is generally fairly precise, further analysis revealed that some aspect candidates were blurred or not detected. We enhanced the mining capabilities of DynAMiT by using formal concept analysis.},
annote = {Artigo incluido.

        
Os autores combinam duas t\'{e}cnicas de minera\c{c}\~{a}o de interesses transversais. Minera\c{c}\~{a}o din\^{a}mica e Formal concept Analysis

      },
author = {Qu, Liping and Liu, Daxin},
booktitle = {Fuzzy Systems and Knowledge Discovery, 2007. FSKD 2007. Fourth International Conference on},
doi = {10.1109/FSKD.2007.281},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Qu, Liu/Fuzzy Systems and Knowledge Discovery, 2007. FSKD 2007. Fourth International Conference on/Qu, Liu - 2007 - Extending Dynamic Aspect Mining Using Formal Concept Analysis.pdf:pdf},
keywords = {DynAMiT,dynamic aspect mining,formal concept analy},
pages = {564--567},
title = {{Extending Dynamic Aspect Mining Using Formal Concept Analysis}},
volume = {3},
year = {2007}
}
@inproceedings{Qu:2007:AMU:1262690.1262897,
abstract = {Aspect mining tries to identify crosscutting concerns in legacy systems and thus supports the adaptation to an aspect-oriented design. This paper describes an automatic static aspect mining approach that relies on the method call tree. It uses method call tree to generate method call traces. These traces are then investigated for recurring method patterns based on different constraints, such as the requirement that the patterns exist in always the same composition and in different calling contexts in the method call trace. A experimental evaluation shows that the approach improves the recall of the aspect candidates and the efficiency of the aspect mining.},
address = {Washington, DC, USA},
annote = {Artigo incluido.},
author = {Qu, Liping and Liu, Daxin},
booktitle = {Proceedings of the 2007 International Conference on Multimedia and Ubiquitous Engineering},
doi = {http://dx.doi.org/10.1109/MUE.2007.91},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Qu, Liu/Proceedings of the 2007 International Conference on Multimedia and Ubiquitous Engineering/Qu, Liu - 2007 - Aspect Mining Using Method Call Tree.pdf:pdf},
isbn = {0-7695-2777-9},
pages = {407--412},
publisher = {IEEE Computer Society},
series = {MUE '07},
title = {{Aspect Mining Using Method Call Tree}},
url = {http://dx.doi.org/10.1109/MUE.2007.91},
year = {2007}
}
@inproceedings{5764110,
abstract = {Crosscutting concerns cannot be well modularized in object-oriented software. The implementation of a crosscutting concern is typically scattered over many locations and tangled with the implementation of other concerns. The presence of crosscutting concerns is one of the major problems in software understanding and evolution. Aspect-oriented programming offers mechanisms to factor them out into a modular unit, called an aspect. Aspect mining tries to identify crosscutting concerns in legacy systems and thus supports the adaptation to an aspect-oriented design. This paper presents an automatic static aspect mining approach that relies on the relative reduced concept lattice. It uses method call tree to describe the relationship between class methods. The method call trees are then subjected to concept analysis. In the resulting relative reduced concept lattice, candidate aspects are detected. An experimental evaluation shows that the approach has a higher automation degree and faster mining rate.},
annote = {artigo incluido.},
author = {Qu, Liping and Yin, Guisheng and Yang, Jing and Hou, Xiaoyu},
booktitle = {Computer Research and Development (ICCRD), 2011 3rd International Conference on},
doi = {10.1109/ICCRD.2011.5764110},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Qu et al/Computer Research and Development (ICCRD), 2011 3rd International Conference on/Qu et al. - 2011 - Aspect mining using relative reduced concept lattice.pdf:pdf},
keywords = {aspect oriented design,aspect oriented programming},
pages = {183--187},
title = {{Aspect mining using relative reduced concept lattice}},
volume = {2},
year = {2011}
}
@inproceedings{1421012,
abstract = {Much of the complexity of software arises from the interactions between disparate concerns. Even in well-designed software, some concerns can not always be encapsulated in a module. Research on separation of concerns seeks to address this problem, but we lack an understanding of how programmers conceptualize the notion of a concern and then identify that concern in code. In this work, we have conducted two exploratory case studies to better understand these issues. The case studies involved programmers identifying concerns and associated code in existing, unfamiliar software: GNU's sort.c and the game Minesweeper. Based on our experiences with these two case studies, we have identified several types of concerns and have detailed a number of factors that impact programmer identification of concerns. Based on these insights, we have created two sets of guidelines: one to help programmers identify relevant concerns and another to help programmers identify code relating to concerns.},
annote = {Artigo nao incluido.

        
Artigo nao apresenta nenhuma tecnica de mineracao de interesse transversal.},
author = {Revelle, M and Broadbent, T and Coppit, D},
booktitle = {Program Comprehension, 2005. IWPC 2005. Proceedings. 13th International Workshop on},
doi = {10.1109/WPC.2005.43},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Revelle, Broadbent, Coppit/Program Comprehension, 2005. IWPC 2005. Proceedings. 13th International Workshop on/Revelle, Broadbent, Coppit - 2005 - Understanding concerns in software insights gained from two case studies.pdf:pdf},
issn = {1092-8138},
keywords = {GNU sort.c,Minesweeper game,aspect-oriented prog},
month = may,
pages = {23--32},
title = {{Understanding concerns in software: insights gained from two case studies}},
year = {2005}
}
@inproceedings{5942080,
abstract = {Refactoring techniques have gained popularity due to their practical value in creating more agile code. Refactoring activities usually aim at improving the software quality, making them easier to understand, maintain, improvements on the software artifacts. Aspect-oriented programming (AOP) is receiving an increased attention due to its power in encapsulating crosscutting concerns. Refactoring allows reorganizing code while preserving the external behavior, while AOP facilitates modularizing crosscutting concerns in a system through use of a new unit of modularity called aspect. A combination of the two - aspect-oriented refactoring - helps in reorganizing code corresponding to crosscutting concerns to further improve modularization and get rid of the usual symptoms of crosscutting: code-tangling and code-scattering in legacy systems. The poorly designed procedural code when refactored with aspect orientation yields a better code. The aim of this paper is to establish a discipline for refactoring that will define the activities to be followed needed for refactoring. Our methodology is broken into two steps: first step is the preparation phase and the second is searching phase. This methodology is used by us in our research work. The set of activities described in this paper will help establish a proper refactoring procedure for the legacy code.},
annote = {artigo n\~{a}ao incluido. Pois o mesmo nao apresenta nenhuma tecnica de mineracao de interesse transversal.},
author = {Rizvi, S A M and Khanam, Z},
booktitle = {Electronics Computer Technology (ICECT), 2011 3rd International Conference on},
doi = {10.1109/ICECTECH.2011.5942080},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Rizvi, Khanam/Electronics Computer Technology (ICECT), 2011 3rd International Conference on/Rizvi, Khanam - 2011 - A methodology for refactoring legacy code.pdf:pdf},
keywords = {aspect oriented programming,code scattering,code t},
pages = {198--200},
title = {{A methodology for refactoring legacy code}},
volume = {6},
year = {2011}
}
@article{Robillard2007,
abstract = {A software modification task often addresses several concerns. A concern is anything a stakeholder may want to consider as a conceptual unit, including features, nonfunctional requirements, and design idioms. In many cases, the source code implementing a concern is not encapsulated in a single programming language module, and is instead scattered and tangled throughout a system. Inadequate separation of concerns increases the difficulty of evolving software in a correct and cost-effective manner. To make it easier to modify concerns that are not well modularized, we propose an approach in which the implementation of concerns is documented in artifacts, called concern graphs. Concern graphs are abstract models that describe which parts of the source code are relevant to different concerns. We present a formal model for concern graphs and the tool support we developed to enable software developers to create and use concern graphs during software evolution tasks. We report on five empirical studies, providing evidence that concern graphs support views and operations that facilitate the task of modifying the code implementing scattered concerns, are cost-effective to create and use, and robust enough to be used with different versions of a software system.},
annote = {Artigo incluido.},
author = {Robillard, Martin P and Murphy, Gail C},
doi = {10.1145/1189748.1189751},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Robillard, Murphy/ACM Transactions on Software Engineering and Methodology/Robillard, Murphy - 2007 - Representing concerns in source code.pdf:pdf},
issn = {1049331X},
journal = {ACM Transactions on Software Engineering and Methodology},
number = {1},
pages = {3----es},
title = {{Representing concerns in source code}},
url = {http://portal.acm.org/citation.cfm?doid=1189748.1189751},
volume = {16},
year = {2007}
}
@article{Roy2007,
abstract = {Aspect mining aims at identifying cross-cutting concerns in existing systems and therefore advocates the adaption to an aspect-oriented design. This paper presents a case study examining three existing aspect mining techniques from the literature by applying them to four different open source java applications. We compare and evaluate the individ- ual technique and confirm the findings of a previous study of combining different aspect mining techniques in order to get better results with less manual intervention.},
annote = {Artigo nao incluido. O mesmo nao apresenta nenhuma tecnica de mineracao de interesse transversal. O artigo somente realiza compara\c{c}\~{o}oes entre as tecnicas de mineracao.

      },
author = {Roy, Chanchal Kumar and {Gias Uddin}, Mohammad and Roy, Banani and Dean, Thomas R.},
doi = {10.1109/ICPC.2007.21},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Roy et al/15th IEEE International Conference on Program Comprehension (ICPC '07)/Roy et al. - 2007 - Evaluating Aspect Mining Techniques A Case Study.pdf:pdf},
isbn = {0-7695-2860-0},
journal = {15th IEEE International Conference on Program Comprehension (ICPC '07)},
pages = {167--176},
publisher = {Ieee},
title = {{Evaluating Aspect Mining Techniques: A Case Study}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4268251},
year = {2007}
}
@inproceedings{Roychoudhury:2004:LAS:1028664.1028693,
abstract = {A long-standing goal of software engineering is to construct software that is easily modified and extended. Recent advances in software design techniques, such as aspect-oriented software development and refactoring, have offered new approaches to address challenges of software evolution. Several tools and language extensions have been developed by others to enable these techniques in a few popular programming languages. However, software exists in a variety of languages. An unfortunate consequence of legacy system adaptation is that new software engineering tools are often developed from scratch without preserving and reusing the knowledge gained from the previous construction of the tool in a different language and platform context. To address this problem, this paper summarizes two core research ideas. First, the concept of extending several software reengineering techniques in disparate programming languages is explored. A core focus of this objective is the abstraction of transformation functions to enable design maintenance in legacy based systems. The second research objective extends the first goal to understand the fundamental science for constructing a generic platform using grammar adapters to enable language-independent software maintenance.},
address = {New York, NY, USA},
annote = {Artigo nao incluido.},
author = {Roychoudhury, Suman},
booktitle = {Companion to the 19th annual ACM SIGPLAN conference on Object-oriented programming systems, languages, and applications},
doi = {http://doi.acm.org/10.1145/1028664.1028693},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Roychoudhury/Companion to the 19th annual ACM SIGPLAN conference on Object-oriented programming systems, languages, and applications/Roychoudhury - 2004 - A language-independent approach to software maintenance using grammar adapters.pdf:pdf},
isbn = {1-58113-833-4},
keywords = {AOP,grammar adapters,program transformation systems,refactoring},
pages = {52--53},
publisher = {ACM},
series = {OOPSLA '04},
title = {{A language-independent approach to software maintenance using grammar adapters}},
url = {http://doi.acm.org/10.1145/1028664.1028693},
year = {2004}
}
@article{Sakamoto2010,
abstract = {In aspect-oriented programming, we can encapsulate cross-cutting concerns scattered over many modules in a system. There are many stud- ies for detecting candidates of cross-cutting concerns called aspect mining, and automation of it. However, existing all aspect mining tools are batch processing system aiming for large systems. Compared with ex- isting batch-type tools, this paper propose an online- type aspect mining tool. The online-type aspect min- ing tool enables us to make cross-cutting concerns as- pect modules during a coding stage. Therefore, it is possible to use it also for a small-scale project which has just started.},
annote = {Artigo incluido. 

        
No entanto, o mesmo nao apresenta de forma clara como \'{e} realmente realizado a mineracao de interesses transversal. O que ficou claro \'{e} que os autores adaptaram a t\'{e}cnica Fan-In para que os desenvolvedores possam em tempo de codifica\c{c}\~{a}o identificar a quantidade de vezes que um determinado m\'{e}todo \'{e} chamado. Tendo tais informa\c{c}\~{o}es os desenvolvedores podem identificar que um determinado m\'{e}etodo esta sendo chamado muitas vezes durante a codifica\c{c}\~{a}o e modularizar tal m\'{e}etodo em um Aspect e seus respectivos pointcuts..},
author = {Sakamoto, Yusuke and Sato, Haruhiko and Kurihara, Masahito},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Sakamoto, Sato, Kurihara/Computer/Sakamoto, Sato, Kurihara - 2010 - A Study on Online Aspect Mining.pdf:pdf},
isbn = {9789881701282},
journal = {Computer},
keywords = {aspect mining,aspect oriented pro-,cross-cutting concerns,gramming,program analysis},
pages = {17--20},
title = {{A Study on Online Aspect Mining}},
volume = {I},
year = {2010}
}
@conference{Shepherd2004601,
abstract = {Attention to aspect oriented programming (AOP) is rapidly growing as its benefits in large software system development and maintenance are increasingly recognized. However, existing large software systems, which could benefit most from refactoring into AOP, still remain unchanged in practice, due to the high cost of the refactoring. Automatic identification and extraction of aspects would not only enable migration of legacy systems to AOP, but also prevent current systems from accumulating scattered and duplicated code. In this paper, we present the design, implementation, and evaluation of an aspect mining analysis, which automatically identifies desirable candidates for refactoring into AOP, without requiring input from the user or predefined queries. By exploiting the program dependence graph and abstract syntax tree representations of a program, our analysis is able to automatically identify a much larger set of valuable refactoring candidates than current aspect mining techniques, as demonstrated by an empirical evaluation of our automatic mining analysis on two large software systems.},
address = {Las Vegas, NV},
annote = {Artigo incluido.

        
Os autores apresentam uma abordagem de mineracao de interesses transversal no qual o usuario da abordagem n\~{a}o precisa fornecer nenhum seed (conhecimento pr\'{e}vio de poss\'{\i}vel interesse transversal). A aborgagem utiliza Program Dependence Graph.},
author = {{Shepherd D.}, Gibson E Pollock L},
booktitle = {Proceedings of the International Conference on Software Engineering Research and Practice, SERP'04},
editor = {{Arabnia H.R.}, Reza H},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Shepherd D/Proceedings of the International Conference on Software Engineering Research and Practice, SERP'04/Shepherd D. - 2004 - Design and evaluation of an automated aspect mining tool.pdf:pdf},
isbn = {1932415300; 9781932415308},
keywords = {Algorithms,Aspect mining,Aspect oriented programming (AOP),Computational complexity,Computer pro,Software engineering},
pages = {601--607},
title = {{Design and evaluation of an automated aspect mining tool}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-12344310464\&partnerID=40\&md5=d98454cdbfd2d3219e59114e867935bb},
volume = {2},
year = {2004}
}
@inproceedings{Shepherd:2007:UNL:1218563.1218587,
abstract = {Most current software systems contain undocumented high-level ideas implemented across multiple files and modules. When developers perform program maintenance tasks, they often waste time and effort locating and understanding these scattered concerns. We have developed a semi-automated concern location and comprehension tool, Find-Concept, designed to reduce the time developers spend on maintenance tasks and to increase their confidence in the results of these tasks. Find-Concept is effective because it searches a unique natural language-based representation of source code, uses novel techniques to expand initial queries into more effective queries, and displays search results in an easy-to-comprehend format. We describe the Find-Concept tool, the underlying program analysis, and an experimental study comparing Find-Concept's search effectiveness with two state-of-the-art lexical and information retrieval-based search tools. Across nine action-oriented concern location tasks derived from open source bug reports, our Eclipse-based tool produced more effective queries more consistently than either competing search tool with similar user effort.},
address = {New York, NY, USA},
annote = {Artigo Incluido.

        
Artigo incluido. Os autores utilizam t\'{e}ecnica de Natural Language Processing  para a identifica\c{c}\~{a}ao de interesses transversais.

        
Artigo Incluido.},
author = {Shepherd, David and Fry, Zachary P and Hill, Emily and Pollock, Lori and Vijay-Shanker, K},
booktitle = {Proceedings of the 6th international conference on Aspect-oriented software development},
doi = {http://doi.acm.org/10.1145/1218563.1218587},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Shepherd et al/Proceedings of the 6th international conference on Aspect-oriented software development/Shepherd et al. - 2007 - Using natural language program analysis to locate and understand action-oriented concerns.pdf:pdf},
isbn = {1-59593-615-7},
keywords = {feature location,program analysis,remodularization,reverse engineering},
pages = {212--224},
publisher = {ACM},
series = {AOSD '07},
title = {{Using natural language program analysis to locate and understand action-oriented concerns}},
url = {http://doi.acm.org/10.1145/1218563.1218587},
year = {2007}
}
@inproceedings{Shepherd:2005:TFA:1101908.1101937,
abstract = {To realize the benefits of Aspect Oriented Programming (AOP), developers must refactor active and legacy code bases into an AOP language. When refactoring, developers first need to identify refactoring candidates, a process called \{$\backslash$em aspect mining\}. Humans perform mining by using a variety of clues to determine which code to refactor. However, existing approaches to automating the aspect mining process focus on developing analyses of a single program characteristic. Each analysis often finds only a subset of possible refactoring candidates and is unlikely to find candidates which humans find by combining analyses. In this paper, we present Timna, a framework for enabling the automatic combination of aspect mining analyses. The key insight is the use of machine learning to learn when to refactor, from vetted examples. Experimental evaluation of the cost-effectiveness of Timna in comparison to Fan-in, a leading aspect mining analysis, indicates that such a framework for automatically combining analyses is very promising.},
address = {New York, NY, USA},
annote = {Artigo incluido. 
Os autores apresenta um framework denominado TIMNA para auxiliar a identifica\c{c}\~{a}o de interesses transversais.},
author = {Shepherd, David and Palm, Jeffrey and Pollock, Lori and Chu-Carroll, Mark},
booktitle = {Proceedings of the 20th IEEE/ACM international Conference on Automated software engineering},
doi = {http://doi.acm.org/10.1145/1101908.1101937},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Shepherd et al/Proceedings of the 20th IEEEACM international Conference on Automated software engineering/Shepherd et al. - 2005 - Timna a framework for automatically combining aspect mining analyses.pdf:pdf},
isbn = {1-58113-993-4},
keywords = {aspect mining,machine learning,program analysis,reverse engineering},
pages = {184--193},
publisher = {ACM},
series = {ASE '05},
title = {{Timna: a framework for automatically combining aspect mining analyses}},
url = {http://doi.acm.org/10.1145/1101908.1101937},
year = {2005}
}
@article{Shepherd:2005:ULC:1082983.1083129,
abstract = {Researchers have developed ways to describe a concern, to store a concern, and even to keep a concern's code quickly available while updating it. Work on identifying concerns (semi-)automatically, however, has yet to gain attention and practical use, even though it is a desirable prerequisite to all of the above activities, particularly for legacy applications. This paper describes a concern identification technique that leverages the natural language processing (NLP) information in source code. Developers often use NLP clues to help understand software, because NLP helps them identify concepts that are semantically related. However, few analyses use NLP to understand programs, or to complement other program analyses. We have observed that an NLP technique called lexical chains offers the NLP equivalent of a concern. In this paper, we investigate the use of lexical chaining to identify crosscutting concerns, present the design and implementation of an algorithm that uses lexical chaining to expose concerns, and provide examples of concerns that our tool is able to discover automatically.},
address = {New York, NY, USA},
annote = {Artigo incluido.
Os autores apresenta uma tecnica de mineracao de interesse transvesal baseado na abordagem Natural Language Processing. Mais detalahamente os autores utilizam Lexical Chains para identificar poss\'{\i}iveis rela\c{c}\~{o}es entre interesses no c\'{o}odigo-fonte.
      },
author = {Shepherd, David and Pollock, Lori and Tourw\'{e}, Tom},
doi = {http://doi.acm.org/10.1145/1082983.1083129},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Shepherd, Pollock, Tourw\'{e}/SIGSOFT Softw. Eng. Notes/Shepherd, Pollock, Tourw\'{e} - 2005 - Using language clues to discover crosscutting concerns.pdf:pdf},
issn = {0163-5948},
journal = {SIGSOFT Softw. Eng. Notes},
month = may,
number = {4},
pages = {1--6},
publisher = {ACM},
title = {{Using language clues to discover crosscutting concerns}},
url = {http://doi.acm.org/10.1145/1082983.1083129},
volume = {30},
year = {2005}
}
@inproceedings{Souter:2003:TRC:942800.943552,
abstract = {Often the code regions that are assigned for a maintenancetask do not follow the modularization of the originalapplication program, but instead include parts of codefrom many different units scattered throughout the application.In this paper, we investigate an approach to testingwhich we call concern-based testing, which leverages existingtools to help software maintainers identify the relevantcode for their assigned task, their concern. The maincontribution is a demonstration of the possible savings intest suite execution overhead and the increased precision incoverage information that can be obtained for a softwaremaintainer if testing tasks are performed with respect toconcerns. Based on a concern graph representation of theconcern, a framework for guiding selective instrumentationfor scalable coverage analysis is also presented.},
address = {Washington, DC, USA},
annote = {Artigo nao incluido pois o mesmo nao apresenta um tecnica de mineracao de interesse transversal.

      },
author = {Souter, Amie L and Shepherd, David and Pollock, Lori L},
booktitle = {Proceedings of the International Conference on Software Maintenance},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Souter, Shepherd, Pollock/Proceedings of the International Conference on Software Maintenance/Souter, Shepherd, Pollock - 2003 - Testing with Respect to Concerns.pdf:pdf},
isbn = {0-7695-1905-9},
pages = {54----},
publisher = {IEEE Computer Society},
series = {ICSM '03},
title = {{Testing with Respect to Concerns}},
url = {http://dl.acm.org/citation.cfm?id=942800.943552},
year = {2003}
}
@article{springerlink:10.1007/s11741-006-0081-y,
abstract = {To solve the identification and comprehension problem of crosscutting concerns in existing legacy software system, a framework of aspect-oriented software reverse engineering is proposed. An approach on re-modularizing traversal features of legacy system is presented based on various unified modeling language (UML) diagrams. While modeling crosscutting concerns in UML use case diagrams, the non-functional requirements that affect several use case modules can be enveloped into aspect modules with a stereotype mechanism. The recurring message transmission patterns can be re-modularized as aspects in UML sequence diagrams with UML collaborations. Standard UML activity diagram notations are extended and modified by node fusion and addition, which support the graphical composition operation between crosscutting behaviors and primary business rules of concurrent systems. Case study indicates that traversal features of software system can be extracted and re-modularized from various perspectives in aspect-oriented reverse engineering, which improves comprehensibility and maintainability of legacy systems.},
annote = {Artigo n\~{a}ao incluido.

        
Apesar do artigo apresentar tecnica de mineracao de interesses trasnversail o mesmo somente se aplica a diagramas de classes.

      },
author = {Su, Yang and Li, Fan and Hu, Sheng-ming and Chen, Ping},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Su et al/Journal of Shanghai University (English Edition)/Su et al. - 2006 - Aspect-oriented software reverse engineering.pdf:pdf},
issn = {1007-6417},
journal = {Journal of Shanghai University (English Edition)},
number = {5},
pages = {402--408},
publisher = {Shanghai University, in co-publication with Springer},
title = {{Aspect-oriented software reverse engineering}},
url = {http://dx.doi.org/10.1007/s11741-006-0081-y},
volume = {10},
year = {2006}
}
@article{Tonella2004,
abstract = {The presence of crosscutting concerns, i.e., functional- ities that are not assigned to a single modular unit in the implementation, is one of the major problems in software understanding and evolution. In fact, they are hard to locate (scattering) and may give rise to multiple ripple effects (tan- gling). Aspect Oriented Programming offers mechanisms to factor them out into a modular unit, called an aspect. In this paper, aspect identification in existing code is supported by means of dynamic code analysis. Execution traces are generated for the use cases that exercise the main functionalities of the given application. The relationship between execution traces and executed computational units (class methods) is subjected to concept analysis. In the re- sulting lattice, potential aspects are detected by determin- ing the use-case specific concepts and examining their spe- cific computational units. When these come from multiple modules (classes) which contribute to multiple use-cases, a candidate aspect is recognized.},
annote = {Artigo incluido.

        
Os autores propoem uma abordagem de mineracao de interesse tranversal que utiliza formal concept analysis.},
author = {Tonella, P. and Ceccato, M.},
doi = {10.1109/WCRE.2004.13},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Tonella, Ceccato/11th Working Conference on Reverse Engineering/Tonella, Ceccato - 2004 - Aspect mining through the formal concept analysis of execution traces.pdf:pdf},
isbn = {0-7695-2243-2},
journal = {11th Working Conference on Reverse Engineering},
pages = {112--121},
publisher = {IEEE Comput. Soc},
title = {{Aspect mining through the formal concept analysis of execution traces}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=1374311},
year = {2004}
}
@article{Tourwe2004,
abstract = {In this paper, we report upon an initial experiment using the technique of formal concept analysis for mining aspec- tual views from the source code. An aspectual view is a set of source code entities, such as class hierarchies, classes and methods, that are structurally related in some way, and often crosscut a particular application. Initially, we follow a lightweight approach, where we only consider the names of classes and methods. This simplistic technique already results in the discovery of interesting and meaningful as- pectual views, leaving us confident that more complex ap- proaches will perform even better, and should be studied in the future.},
annote = {Artigo incluido. O mesmo apresenta uma tecnica de mineracao que utiliza formal concept analysis.

        
Defini\c{c}\~{a}o sobre formal concept analysis: http://www.wormuth.info/ICFCA04/Introduction\_to\_FCA\_ICFCA2004.pdf},
author = {Tourwe, T. and Mens, K.},
doi = {10.1109/SCAM.2004.15},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Tourwe, Mens/Source Code Analysis and Manipulation, Fourth IEEE International Workshop on/Tourwe, Mens - 2004 - Mining aspectual views using formal concept analysis.pdf:pdf},
isbn = {0-7695-2144-4},
journal = {Source Code Analysis and Manipulation, Fourth IEEE International Workshop on},
pages = {97--106},
publisher = {IEEE Comput. Soc},
title = {{Mining aspectual views using formal concept analysis}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=1386163},
year = {2004}
}
@inproceedings{Trifu:2008:UDI:1545010.1545363,
abstract = {Improper encapsulation of cross-cutting concerns significantly hinders software understandability and contributes to rising software maintenance costs. Concern identification covers the necessary first step towards separating and encapsulating concerns in existing object-oriented code. Because most of the current approaches rely on syntactic rather than semantic information, they do not provide sufficient support for software understanding. This paper proposes a new semi-automated approach for concern identification specifically designed to support software understanding, which starts from a set of related variables and uses static dataflow information to determine the concern skeleton, a data-oriented abstraction of a concern. We discuss the application of this approach to the JHotDraw case-study, the de facto standard benchmark for concern identification, and show that it can be used to identify a significant number of concerns, including several concerns not previously discussed in the existing literature.},
address = {Washington, DC, USA},
annote = {Artigo incluido.},
author = {Trifu, Mircea},
booktitle = {Proceedings of the 2008 12th European Conference on Software Maintenance and Reengineering},
doi = {10.1109/CSMR.2008.4493314},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Trifu/Proceedings of the 2008 12th European Conference on Software Maintenance and Reengineering/Trifu - 2008 - Using Dataflow Information for Concern Identification in Object-Oriented Software Systems.pdf:pdf},
isbn = {978-1-4244-2157-2},
pages = {193--202},
publisher = {IEEE Computer Society},
title = {{Using Dataflow Information for Concern Identification in Object-Oriented Software Systems}},
url = {http://dl.acm.org/citation.cfm?id=1545010.1545363},
year = {2008}
}
@inproceedings{vanderRijst:2008:SRC:1404953.1404957,
abstract = {Crosscutting concerns in object-oriented programming hinder evolution because of their symptoms: tangling and scattering. To benefit from the modularisation capabilities for crosscutting concerns provided by aspect-oriented programming (which prevent tangling and scattering) aspect-introducing refactoring can be used. The first step in aspect-introducing refactoring is identifying and documenting crosscutting concerns in existing code. The second step is refactoring the identified concerns to aspects. This paper describes a tool called SAIR that can perform the second step of the aspect-introducing refactoring. For the first step, documenting, SAIR uses crosscutting concern sorts. Of the various possible sorts, SAIR currently supports the two most commonly encountered ones: Role Superimposition and Consistent Behavior. The refactoring towards aspects of concerns of these sorts is illustrated on an open source application (JHotDraw).},
address = {New York, NY, USA},
annote = {Artigo incluido.

        

        
Os autores apresentam uma ferramenta denominada SAIR (Sort-based Aspect Introducing Refactoring) que realiza tanto a minera\c{c}\~{a}o de interesse transversal (utiliza Sort Based) e realiza a refatora\c{c}\~{a}o de sistemas OO para OA.},
author = {van der Rijst, Robin and Marin, Marius and van Deursen, Arie},
booktitle = {Proceedings of the 2008 AOSD workshop on Linking aspect technology and evolution},
doi = {http://doi.acm.org/10.1145/1404953.1404957},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/van der Rijst, Marin, van Deursen/Proceedings of the 2008 AOSD workshop on Linking aspect technology and evolution/van der Rijst, Marin, van Deursen - 2008 - Sort-based refactoring of crosscutting concerns to aspects.pdf:pdf},
isbn = {978-1-60558-147-7},
pages = {4:1----4:5},
publisher = {ACM},
series = {LATE '08},
title = {{Sort-based refactoring of crosscutting concerns to aspects}},
url = {http://doi.acm.org/10.1145/1404953.1404957},
year = {2008}
}
@inproceedings{Vidal200923,
abstract = {Aspect-oriented software development allows the encapsulation of crosscutting concerns, achieving a better system modularization and, therefore, improving its maintenance. One important challenge is how to evolve an object-oriented system into an aspect-oriented one in such a way the system structure gets gradually improved. This paper describes a process to assist developers in the refactoring of object-oriented systems to aspects. To do so, we propose a tool approach that combines aspect mining techniques with a rule-base engine to apply refactorings. Copyright 2009 ACM.},
address = {Charlottesville, VA},
annote = {Artigo incluido.

        
Os autores apresentam uma ferramenta denominada AspectRT (Aspect Refactoring Tool). Essa ferramenta utiliza dynamic analysis para identificar poss\'{\i}veis interesses transversal. Al\'{e}m disso, a ferramenta prov\^{e} apoio para realizar a refatora\c{c}\~{a}o de sistemas OO para OA.},
author = {{Vidal S.a Abait}, E.S.a Marcos C.a Casas S.b D\'{\i}az Pace J.A.c and Vidal, Santiago and Abait, Esteban S. and Marcos, Claudia and Casas, Sandra and {D\'{\i}az Pace}, J. Andr\'{e}s},
booktitle = {Proceedings of the 1st Workshop on Practices of Linking Aspect Technology and Evolution, PLATE '09, Co-located with the 8th International Conference on Aspect-Oriented Software Development, AOSD.09},
doi = {10.1145/1509847.1509852},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Vidal S.a Abait et al/Proceedings of the 1st Workshop on Practices of Linking Aspect Technology and Evolution, PLATE '09, Co-located with the 8th International Conference on Aspect-Oriented Software Development, AOSD.09/Vidal S.a Abait et al. - 2009 - Aspect mining meets rule-based refactoring.pdf:pdf},
isbn = {9781605584539},
keywords = {Aspect oriented software developmen,Computer software,Computer software maintenance,Software design,aspect mining,aspect refactoring,software maintenance},
pages = {23--27},
publisher = {ACM Press},
title = {{Aspect mining meets rule-based refactoring}},
url = {http://portal.acm.org/citation.cfm?doid=1509847.1509852 http://www.scopus.com/inward/record.url?eid=2-s2.0-77953997899\&partnerID=40\&md5=48ea0292510ea395775604e789eaac8d},
year = {2009}
}
@inproceedings{Yang:2007:AMD:1337693.1338436,
abstract = {Traditional web service orchestration is always implemented by business process work flow or I/O matching. But this method will invoke some problems including too many composite results, inefficiency, and most important the composition is static for service orchestration is based on service concerns, but not taking account of service status. Based on Aspect-Oriented analysis, service concerns are divided into base themes and aspect themes in this paper. Base themes are traditional service entities, while aspect themes are cross-cutting service concerns. Incoming filtering chain and outgoing filtering chain, which are aspect-based expressions, are used to describe service providers or customers status. Service orchestration can be achieved through these two filtering policies dynamically for aspect-based expressions and results are dynamic. Testing cases have been used in Chinese Mobile-Oriented City Information System, and the results demonstrate that dynamic service orchestration can be achieved through two aspect filtering chains.},
address = {Washington, DC, USA},
annote = {Artigo nao incluido.

        

        
Artigo n\~{a}ao apresenta nenhuma tecnica de minera\c{c}\~{a}ao de interesses transversais.

      },
author = {Yang, Hao and Chen, Junliang and Meng, Xiangwu},
booktitle = {Proceedings of the Third International Conference on Next Generation Web Services Practices},
doi = {http://dx.doi.org/10.1109/NWESP.2007.9},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Yang, Chen, Meng/Proceedings of the Third International Conference on Next Generation Web Services Practices/Yang, Chen, Meng - 2007 - Aspect Mining for Dynamic Service Orchestration.pdf:pdf},
isbn = {0-7695-3022-2},
pages = {141--146},
publisher = {IEEE Computer Society},
series = {NWESP '07},
title = {{Aspect Mining for Dynamic Service Orchestration}},
url = {http://dx.doi.org/10.1109/NWESP.2007.9},
year = {2007}
}
@inproceedings{5572310,
abstract = {To solve the identification and comprehension problem of crosscutting concerns in existing legacy software system, a framework of aspects-oriented software reverse engineering was proposed. An approach on re-modularizing traversal features of legacy system was presented, which based on various Unified Modeling Language (UML) diagrams. While modeling crosscutting concerns in UML use case diagrams, the non-functional requirements that affect several use case modules can be enveloped into aspects modules with stereotype mechanism. The recurring message transmission patterns can be re-modularized as aspects in UML sequence diagrams with UML collaborations. Standard UML activity diagram notations were extended and modified by nodes fusion and addition, which support the graphical composition operation between crosscutting behaviors and primary business rules of concurrent system. The case study indicates traversal features of software system can be extracted and re-modularized from various perspectives in aspects-oriented reverse engineering, which improves the comprehensibility and maintainability of legacy system.},
annote = {Artigo n\~{a}ao incluido.

      },
author = {Yang, Su},
booktitle = {Networked Computing and Advanced Information Management (NCM), 2010 Sixth International Conference on},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Yang/Networked Computing and Advanced Information Management (NCM), 2010 Sixth International Conference on/Yang - 2010 - Understanding crosscutting concerns from various perspectives in software reverse engineering.pdf:pdf},
keywords = {UML,aspect oriented reverse engineering,graphical},
pages = {145--150},
title = {{Understanding crosscutting concerns from various perspectives in software reverse engineering}},
year = {2010}
}
@inproceedings{5676876,
abstract = {To solve the identification and comprehension problem of crosscutting concerns in existing legacy software system, a framework of aspects-oriented software reverse engineering was proposed. An approach on re-modularizing traversal features of legacy system was presented, which based on various Unified Modeling Language (UML) diagrams. While modeling crosscutting concerns in UML use case diagrams, the non-functional requirements that affect several use case modules can be enveloped into aspects modules with stereotype mechanism. The recurring message transmission patterns can be re-modularized as aspects in UML sequence diagrams with UML collaborations. Standard UML activity diagram notations were extended and modified by nodes fusion and addition, which support the graphical composition operation between crosscutting behaviors and primary business rules of concurrent system. The case study indicates traversal features of software system can be extracted and re-modularized from various perspectives in aspects-oriented reverse engineering, which improves the comprehensibility and maintainability of legacy system.},
annote = {artigo n\~{a}ao incluido.

        
Embora o artigo apresente uma tecnica de minera\c{c}\~{a}ao de interesse transversal o mesmo se aplica a diagrama de classes.},
author = {Yang, Su and Wei-Dong, Zhong},
booktitle = {Computational Intelligence and Software Engineering (CiSE), 2010 International Conference on},
doi = {10.1109/CISE.2010.5676876},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Yang, Wei-Dong/Computational Intelligence and Software Engineering (CiSE), 2010 International Conference on/Yang, Wei-Dong - 2010 - Re-Modularizing Traverse Feature from Various Perspectives in Software Reverse Engineering.pdf:pdf},
keywords = {aspects-oriented software reverse engineering,cros},
pages = {1--4},
title = {{Re-Modularizing Traverse Feature from Various Perspectives in Software Reverse Engineering}},
year = {2010}
}
@article{Yu:2008:IMR:1350802.1350816,
abstract = {Modularity is an important principle of software design. It is directly associated with software understandability, maintainability, and reusability. However, as software systems evolve, old code segments are modified / removed and new code segments are added, the original modular design of the program might be distorted. One of the factors that can affect the modularity of the system is the introduction of code clones --- a portion of source code that is identical or similar to another --- in the software evolution process. This paper applies clone detection techniques to study the modularity of Linux. The code clones are first identified using an automatic tool. Then each clone set is analyzed by a domain expert to classify it into one of the three clone concern categories: singular concern, crosscutting concern, and partial concern. Different approaches to dealing with these different categories of code clones are suggested in order to improve modularity.},
address = {New York, NY, USA},
annote = {Artigo incluido.

        
Os autores apresentam uma abordagem que utiliza clone detection para auxiliar a minera\c{c}\~{a}o de interesses transversais.},
author = {Yu, Liguo and Ramaswamy, Srini},
doi = {http://doi.acm.org/10.1145/1350802.1350816},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Yu, Ramaswamy/SIGSOFT Softw. Eng. Notes/Yu, Ramaswamy - 2008 - Improving modularity by refactoring code clones a feasibility study on Linux.pdf:pdf},
issn = {0163-5948},
journal = {SIGSOFT Softw. Eng. Notes},
keywords = {Linux,code clone,modularity,operating systems,refactoring},
number = {2},
pages = {9:1----9:5},
publisher = {ACM},
title = {{Improving modularity by refactoring code clones: a feasibility study on Linux}},
url = {http://doi.acm.org/10.1145/1350802.1350816},
volume = {33},
year = {2008}
}
@inproceedings{Yuen:2007:BGA:1275672.1275673,
abstract = {Aspect-mining techniques help to identify crosscutting structure that could potentially be modularized through object-oriented (OO) or aspect-oriented refactoring (AO). This paper describes a case study in which we used aspect-mining techniques to identify and refactor crosscutting concerns using aspect-oriented programming. We observed that, in our case, there were many subtle variations in the implementation of the concerns that made them non-trivial to modularize with AO refactoring. In the end, we solved our modularization problem using traditional OO refactoring. We conclude that there exists an important gap between the identification of crosscutting concerns and the technologies available to mitigate the problem.},
address = {New York, NY, USA},
annote = {Artigo incluido.

        
Os autores tentam apresentam o desafio em realizar a minera\c{c}\~{a}o de interesses transversais em sistemas legados OO e transforma-l\'{o}s em AO. A t\'{e}cnica de minera\c{c}\~{a}o de interesses transversal utilizada foi fan-in analysis.},
author = {Yuen, Isaac and Robillard, Martin P},
booktitle = {Proceedings of the 3rd workshop on Linking aspect technology and evolution},
doi = {http://doi.acm.org/10.1145/1275672.1275673},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Yuen, Robillard/Proceedings of the 3rd workshop on Linking aspect technology and evolution/Yuen, Robillard - 2007 - Bridging the gap between aspect mining and refactoring.pdf:pdf},
isbn = {978-1-59593-655-4},
publisher = {ACM},
series = {LATE '07},
title = {{Bridging the gap between aspect mining and refactoring}},
url = {http://doi.acm.org/10.1145/1275672.1275673},
year = {2007}
}
@article{Zeng20091221,
abstract = {By means of discovering crosscutting concerns from legacy systems,
aspect mining intends to help migrate the systems to an aspect-oriented
design. An improved method based on maximum tree method for aspect
mining is presented. The method uses aspect ideas to capture the
runtime method-call information by mining crosscutting concerns from
dynamic behaviors, and then constructs a method-call relationship
data matrix. Based on fuzzy similarity relation theory, by introducing
the similarity, an object similarity matrix is constructed, and the
maximum tree method is used to identify the crosscutting concerns
in the system. The method can provide a basis for system's software
reconstruction and reusability. An experiment is conducted to verify
the validity of the method. Compared with the existing typical mining
methods, the method shows the virtue of clear implementation and
high efficiency.},
annote = {Artigo nao includo.
O mesmo n\~{a}ao esta escrito em ingles.

        

      },
author = {{Zeng Y.a Hong}, Y.a Liu Y.a b Wang J.a},
issn = {1000582X},
journal = {Chongqing Daxue Xuebao/Journal of Chongqing University},
keywords = { Computer software reusability; Fuzzy logic; Manag, Legacy systems,Aspect mining; Aspect-oriented designs; Crosscutti},
number = {10},
pages = {1221--1225},
title = {{Maximum tree method based aspect mining method}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-70749092785\&partnerID=40\&md5=431edbf5bccfd41d154f8f5edc8606dd},
volume = {32},
year = {2009}
}
@conference{Zhang200420,
abstract = {It's a pleasure to welcome you to OOPSLA 2004, the 19th Annual Conference on Object-Oriented Programming, Systems, Languages, and Applications. OOPSLA is the premier forum for practitioners, researchers, and students in diverse disciplines whose common thread is object technology. From its inception, OOPSLA has served as an incubator for advanced technologies and practices. Dynamic compilation and optimization, patterns, refactoring, aspect-oriented programming, and agile methods (to name a few) all have OOPSLA roots. OOPSLA 2004 continues that tradition. Researchers and practitioners from around the world have come to showcase their latest work. Presentations from invited speakers dovetail with technical papers, practitioner reports, expert panels, demonstrations, formal and informal educational symposia, workshops, and diverse tutorials from world-class lecturers. The popular Onward! track presents out-of-the-box thinking at the forefront of computing. You can discuss late-breaking results with the researchers themselves at poster sessions, which culminate in the Third Annual SIGPLAN Student Research Competition. DesignFest provides hands-on design experience in an expert-mentored environment. And again this year, we're privileged to host the ACM Turing Lecture. Alan Kay, Turing laureate for 2003, received the prestigious award "for pioneering many of the ideas at the root of contemporary object-oriented programming languages, leading the team that developed Smalltalk, and for fundamental contributions to personal computing." It's especially fitting that Dr. Kay deliver the Turing Lecture at OOPSLA.},
address = {Vancouver, BC},
annote = {Artigo nao incluido.

        
O mesmo contem somente 2 paginas.},
author = {{Zhang C.a b Jacobsen}, H.-A.a b},
booktitle = {Proceedings of the Conference on Object-Oriented Programming Systems, Languages, and Applications, OOPSLA},
doi = {10.1145/1028664.1028676},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Zhang C.a b Jacobsen/Proceedings of the Conference on Object-Oriented Programming Systems, Languages, and Applications, OOPSLA/Zhang C.a b Jacobsen - 2004 - PRISM is research in aSpect mining.pdf:pdf},
isbn = {1581138334; 9781581138337},
keywords = {Advanced technology,Agile methods,Aspect mining,Aspect oriented programming,Computer systems pro,Object oriented programming},
pages = {20--21},
title = {{PRISM is research in aSpect mining}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-34548290270\&partnerID=40\&md5=e7dc24b493a9aaa2165d192fc42f6c2e},
year = {2004}
}
@article{5989837,
abstract = {Inspired by our past manual aspect mining experience, this paper describes a probabilistic random walk model to approximate the process of discovering crosscutting concerns in the absence of domain knowledge about the application investigated. The random walks are performed on the concept graphs extracted from the program sources to calculate metrics of amp;\#x201C;utilization amp;\#x201D; and amp;\#x201C;aggregation amp;\#x201D; for each program element. We rank all the program elements based on these metrics and use a threshold to produce a set of candidates that represent crosscutting concerns (CCs). We implemented the algorithm as the Prism CC Miner (PCM) and evaluated PCM on Java applications ranging from a small-scale drawing application to a medium-sized middleware application and a large-scale enterprise application server. Our quantification shows that PCM is able to produce comparable results to manual mining efforts. With a 95\% accuracy the top 125 crosscutting candidates are identified automatically. PCM is also significantly more effective as compared to conventional mining approaches.},
annote = {Artigo incluido.

        
Os autores apresentam uma abordagem de minera\c{c}\~{a}o de interesse transversal que utiliza algoritmos de random walk (PageRank e HITS) para a identifica\c{c}\~{a}o de interesses.},
author = {Zhang, C and Jacobsen, H},
doi = {10.1109/TSE.2011.83},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Zhang, Jacobsen/Proceedings of the 6th international conference on Aspect-oriented software development - AOSD '07/Zhang, Jacobsen - 2007 - Efficiently mining crosscutting concerns through random walks(2).pdf:pdf},
issn = {0098-5589},
journal = {Software Engineering, IEEE Transactions on},
number = {99},
pages = {1},
title = {{Mining Crosscutting Concerns through Random Walks}},
volume = {PP},
year = {2011}
}
@inproceedings{Zhang:2007:EMC:1218563.1218588,
abstract = {Inspired by our past manual aspect mining experiences, this paper describes a random walk model to approximate how crosscutting concerns can be discovered in the absence of domain knowledge of the investigated application. Random walks are performed on the coupling graphs extracted from the program sources. The ideas underlying the popular page-rank algorithm are adapted and ex- tended to generate ranks reflecting the degrees of “popularity” and “significance” for each of the program elements on the coupling graphs. Filtering techniques, exploiting both types of ranks, are ap- plied to produce a final list of candidates representing crosscutting concerns. The resulting aspect mining algorithm is evaluated on nu- merous Java applications ranging from a small-scale drawing appli- cation, to a medium-sized middleware application, and to a large- scale enterprise application server. In seconds, the aspect mining algorithm is able to produce results comparable to our prior man- ual mining efforts. The mining algorithm also proves effective in helping domain experts identify latent crosscutting concerns},
address = {New York, New York, USA},
annote = {Artigo incluido.

        
Os autores apresentam uma abordagem de minera\c{c}\~{a}o de interesse transversal que utiliza algoritmos de random walk (PageRank e HITS) para a identifica\c{c}\~{a}o de interesses.},
author = {Zhang, Charles and Jacobsen, Hans-arno},
booktitle = {Proceedings of the 6th international conference on Aspect-oriented software development - AOSD '07},
doi = {10.1145/1218563.1218588},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Zhang, Jacobsen/Proceedings of the 6th international conference on Aspect-oriented software development - AOSD '07/Zhang, Jacobsen - 2007 - Efficiently mining crosscutting concerns through random walks(2).pdf:pdf;:Users/rafaeldurelli/Documents/papersSystematicReview/Zhang, Jacobsen/Proceedings of the 6th international conference on Aspect-oriented software development - AOSD '07/Zhang, Jacobsen - 2007 - Efficiently mining crosscutting concerns through random walks.pdf:pdf},
isbn = {1595936157},
keywords = {aspect discovery,aspect mining,crosscutting con-,crosscutting concern discovery},
pages = {226},
publisher = {ACM Press},
series = {AOSD '07},
title = {{Efficiently mining crosscutting concerns through random walks}},
url = {http://doi.acm.org/10.1145/1218563.1218588 http://portal.acm.org/citation.cfm?doid=1218563.1218588},
year = {2007}
}
@inproceedings{Zhang:2003:QAM:643603.643617,
abstract = {Middleware technologies such as Web Services, CORBA and DCOM have been very successful in solving distributed computing problems for a large family of application domains. As middleware systems are getting widely adopted and more functionally mature, it is also increasingly difficult for the architecture of middleware to achieve a high level of adaptability and configurability, due to the limitations of traditional software decomposition methods. Aspect oriented programming has brought us new design perspectives because it permits the superimpositions of multiple abstraction models on top of one another. It is a very powerful technique in separating and simplifying design concerns. In this paper, we first show that, through the quantification of aspects in the legacy implementations, the modularity of middleware architecture is greatly hindered by the ubiquitous existence of tangled logic. We then go one step further by factoring out a number of aspects identified in the mining work and re-implementing them as aspect programs. The aspect oriented re-factorization allows us to apply a set of software engineering metrics to quantify the changes of the re-factored system in both the structural complexity and the runtime performance. The aspect oriented re-factoring proves that the aspect oriented programming is capable of composing orthogonal design requirements. The final "woven" system is able to correctly provide both the fundamental functionality and the "aspectized" functionality with negligible overhead and a leaner architecture. Further more, the configurability of middleware is dramatically increased because the "aspectized" features can be configured in and out during the compile-time},
address = {New York, NY, USA},
annote = {Artigo nao incluido, pois os autores nao apresentam uma tecnica de mineracao de interesse transversal.

      },
author = {Zhang, Charles and Jacobsen, Hans-Arno.},
booktitle = {Proceedings of the 2nd international conference on Aspect-oriented software development},
doi = {http://doi.acm.org/10.1145/643603.643617},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Zhang, Jacobsen/Proceedings of the 2nd international conference on Aspect-oriented software development/Zhang, Jacobsen - 2003 - Quantifying aspects in middleware platforms.pdf:pdf},
isbn = {1-58113-660-9},
keywords = {aspect mining,aspect oriented programming,distributed systems,evaluation and metrics,middleware,software architecture},
pages = {130--139},
publisher = {ACM},
series = {AOSD '03},
title = {{Quantifying aspects in middleware platforms}},
url = {http://doi.acm.org/10.1145/643603.643617},
year = {2003}
}
@inproceedings{Zhang:2007:TEA:1332470.1332636,
abstract = {Code implementing a crosscutting concern spreads over many parts of the Linux code. Identifying these code automatically can benefit both the maintainability and evolvability of Linux. In this paper, we present a case study on how to identify aspects in the Linux code. First, we analyze four typical crosscutting concerns in Linux and show how to apply existing mining approaches to identify these concerns. We then propose three new mining approaches and compare their performance with the original methods. Experiments show that the proposed mining approaches can find these concerns more efficiently in Linux.},
address = {Washington, DC, USA},
annote = {Artigo incluido. Os autores aplicam tecnicas de mineracao tais como Fan-In e Clone Detection no Kernel do Linux para identificar poss\'{\i}iveis indicios de interesses transversal. Um experimento \'{e} conduzido com o objetivo de verificar a abordagem proposta.},
author = {Zhang, Danfeng and Guo, Yao and Wang, Yue and Chen, Xiangqun},
booktitle = {Proceedings of the 14th Asia-Pacific Software Engineering Conference},
doi = {http://dx.doi.org/10.1109/APSEC.2007.95},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Zhang et al/Proceedings of the 14th Asia-Pacific Software Engineering Conference/Zhang et al. - 2007 - Toward Efficient Aspect Mining for Linux.pdf:pdf},
isbn = {0-7695-3057-5},
pages = {191--198},
publisher = {IEEE Computer Society},
series = {APSEC '07},
title = {{Toward Efficient Aspect Mining for Linux}},
url = {http://dx.doi.org/10.1109/APSEC.2007.95},
year = {2007}
}
@article{Zhang2008,
abstract = {Aspect mining aims at identifying, analyzing, and refactoring crosscutting concerns throughout a legacy system for the purpose of improving software modularization. Current research on aspect mining prevails at the implementation level as applied to source code. However, an aspect-oriented approach can be beneficial at various levels of abstraction and at different stages of the software lifecycle. This paper presents our investigation into raising the benefits of aspect mining to a higher level of abstraction through application of aspect mining algorithms to domain-specific models. A key contribution of the approach is a capability to identify crosscutting concerns early in development, which assists in modularizing a design through aspects before proceeding to the implementation level. Furthermore, our experience has led us to believe that aspects are easier to identify at the modeling level because much of the accidental complexities of implementation concerns are not present in the corresponding modeling abstractions.},
annote = {Artigo n\~{a}ao incluido, pois o mesmo n\~{a}o apresenta uma tecnica de mineracao de interesses transversais com base no c\'{o}odigo fonte e sim em modelo (diagrama de classe, por exemplo.)},
author = {Zhang, Jing and Gray, Jeff and Lin, Yuehua and Tairas, Robert},
doi = {10.1504/IJCAT.2008.017720},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Zhang et al/International Journal of Computer Applications in Technology/Zhang et al. - 2008 - Aspect mining from a modelling perspective.pdf:pdf},
issn = {0952-8091},
journal = {International Journal of Computer Applications in Technology},
keywords = {and a member of,aspect mining,aspect-oriented software development,biographical notes,birmingham,department of computer and,domain-specific modeling,engineering,information sciences at the,jing zhang is a,model-driven,phd candidate in the,uab,university of alabama at},
number = {1/2},
pages = {74},
title = {{Aspect mining from a modelling perspective}},
url = {http://www.inderscience.com/link.php?id=17720},
volume = {31},
year = {2008}
}
@inproceedings{Zimmermann:2006:MAM:1137983.1138025,
abstract = {In this paper we refine the classical co-change to the addition of method calls. We use this concept to find usage patterns and to identify cross-cutting concerns for ArgoUML.},
address = {New York, NY, USA},
annote = {Artigo nao incluido, possui somente duas p\'{a}ginas.

      },
author = {Zimmermann, Thomas and Breu, Silvia and Lindig, Christian and Livshits, Benjamin},
booktitle = {Proceedings of the 2006 international workshop on Mining software repositories},
doi = {http://doi.acm.org/10.1145/1137983.1138025},
file = {:Users/rafaeldurelli/Documents/papersSystematicReview/Zimmermann et al/Proceedings of the 2006 international workshop on Mining software repositories/Zimmermann et al. - 2006 - Mining additions of method calls in ArgoUML.pdf:pdf},
isbn = {1-59593-397-2},
pages = {169--170},
publisher = {ACM},
series = {MSR '06},
title = {{Mining additions of method calls in ArgoUML}},
url = {http://doi.acm.org/10.1145/1137983.1138025},
year = {2006}
}
